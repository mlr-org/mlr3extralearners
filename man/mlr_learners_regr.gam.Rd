% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learner_mgcv_regr_gam.R
\name{mlr_learners_regr.gam}
\alias{mlr_learners_regr.gam}
\alias{LearnerRegrGam}
\title{Regression Generalized Additive Model Learner}
\description{
Generalized additive models. Calls \code{\link[mgcv:gam]{mgcv::gam()}} from package \CRANpkg{mgcv}.
}
\section{Formula}{

A gam formula specific to the task at hand is required for the \code{formula}
parameter (see example and \code{?mgcv::formula.gam}). Beware, if no formula is provided, a fallback formula is
used that will make the gam behave like a glm (this behavior is required
for the unit tests). Only features specified in the formula will be used,
superseding columns with col_roles "feature" in the task.
}

\section{Dictionary}{

This \link{Learner} can be instantiated via the \link[mlr3misc:Dictionary]{dictionary} \link{mlr_learners} or with the associated sugar function \code{\link[=lrn]{lrn()}}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{mlr_learners$get("regr.gam")
lrn("regr.gam")
}\if{html}{\out{</div>}}
}

\section{Meta Information}{

\itemize{
\item Task type: \dQuote{regr}
\item Predict Types: \dQuote{response}, \dQuote{se}
\item Feature Types: \dQuote{logical}, \dQuote{integer}, \dQuote{numeric}, \dQuote{factor}
\item Required Packages: \CRANpkg{mlr3}, \CRANpkg{mlr3extralearners}, \CRANpkg{mgcv}
}
}

\section{Parameters}{
\tabular{lllll}{
   Id \tab Type \tab Default \tab Levels \tab Range \cr
   family \tab character \tab gaussian \tab gaussian, poisson \tab - \cr
   formula \tab untyped \tab - \tab  \tab - \cr
   offset \tab untyped \tab NULL \tab  \tab - \cr
   method \tab character \tab GCV.Cp \tab GCV.Cp, GACV.Cp, REML, P-REML, ML, P-ML \tab - \cr
   optimizer \tab untyped \tab c("outer", "newton") \tab  \tab - \cr
   scale \tab numeric \tab 0 \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
   select \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   knots \tab untyped \tab NULL \tab  \tab - \cr
   sp \tab untyped \tab NULL \tab  \tab - \cr
   min.sp \tab untyped \tab NULL \tab  \tab - \cr
   H \tab untyped \tab NULL \tab  \tab - \cr
   gamma \tab numeric \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   paraPen \tab untyped \tab NULL \tab  \tab - \cr
   G \tab untyped \tab NULL \tab  \tab - \cr
   in.out \tab untyped \tab NULL \tab  \tab - \cr
   drop.unused.levels \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   drop.intercept \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   nthreads \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   irls.reg \tab numeric \tab 0 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   epsilon \tab numeric \tab 1e-07 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   maxit \tab integer \tab 200 \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
   trace \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   mgcv.tol \tab numeric \tab 1e-07 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   mgcv.half \tab integer \tab 15 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   rank.tol \tab numeric \tab 1.490116e-08 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   nlm \tab untyped \tab list() \tab  \tab - \cr
   optim \tab untyped \tab list() \tab  \tab - \cr
   newton \tab untyped \tab list() \tab  \tab - \cr
   outerPIsteps \tab integer \tab 0 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   idLinksBases \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   scalePenalty \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   efs.lspmax \tab integer \tab 15 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   efs.tol \tab numeric \tab 0.1 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   scale.est \tab character \tab fletcher \tab fletcher, pearson, deviance \tab - \cr
   nei \tab untyped \tab - \tab  \tab - \cr
   ncv.threads \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   edge.correct \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   block.size \tab integer \tab 1000 \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
   unconditional \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
}
}

\examples{

# simple example
t = mlr3::tsk("mtcars")
l = mlr3::lrn("regr.gam")
l$param_set$values$formula = mpg ~ cyl + am + s(disp) + s(hp)
l$train(t)
l$model
}
\references{
Hastie, J T, Tibshirani, J R (2017).
\emph{Generalized additive models}.
Routledge.

Wood, Simon (2012).
\dQuote{mgcv: Mixed GAM Computation Vehicle with GCV/AIC/REML smoothness estimation.}
}
\author{
JazzyPierrot
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerRegr]{mlr3::LearnerRegr}} -> \code{LearnerRegrGam}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerRegrGam-new}{\code{LearnerRegrGam$new()}}
\item \href{#method-LearnerRegrGam-clone}{\code{LearnerRegrGam$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrGam-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrGam-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrGam$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrGam-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrGam-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrGam$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
