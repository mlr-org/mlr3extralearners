% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learner_randomForestSRC_cmprsk_rfsrc.R
\name{mlr_learners_cmprsk.rfsrc}
\alias{mlr_learners_cmprsk.rfsrc}
\alias{LearnerCompRisksRandomForestSRC}
\title{Random Forest Competing Risks Learner}
\description{
Random survival forests for competing risks.
Calls \code{\link[randomForestSRC:rfsrc]{randomForestSRC::rfsrc()}} from \CRANpkg{randomForestSRC}.
}
\section{Dictionary}{

This \link[mlr3:Learner]{Learner} can be instantiated via \link[mlr3:mlr_sugar]{lrn()}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{lrn("cmprsk.rfsrc")
}\if{html}{\out{</div>}}
}

\section{Meta Information}{

\itemize{
\item Task type: \dQuote{cmprsk}
\item Predict Types: \dQuote{cif}
\item Feature Types: \dQuote{logical}, \dQuote{integer}, \dQuote{numeric}, \dQuote{factor}
\item Required Packages: \CRANpkg{mlr3}, \CRANpkg{mlr3proba}, \CRANpkg{mlr3extralearners}, \CRANpkg{randomForestSRC}
}
}

\section{Parameters}{
\tabular{lllll}{
   Id \tab Type \tab Default \tab Levels \tab Range \cr
   ntree \tab integer \tab 500 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   mtry \tab integer \tab - \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   mtry.ratio \tab numeric \tab - \tab  \tab \eqn{[0, 1]}{[0, 1]} \cr
   nodesize \tab integer \tab 15 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   nodedepth \tab integer \tab - \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   splitrule \tab character \tab logrankCR \tab logrankCR, logrank \tab - \cr
   nsplit \tab integer \tab 10 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   importance \tab character \tab FALSE \tab FALSE, TRUE, none, anti, permute, random \tab - \cr
   block.size \tab integer \tab 10 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   bootstrap \tab character \tab by.root \tab by.root, by.node, none, by.user \tab - \cr
   samptype \tab character \tab swor \tab swor, swr \tab - \cr
   samp \tab untyped \tab - \tab  \tab - \cr
   membership \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   sampsize \tab untyped \tab - \tab  \tab - \cr
   sampsize.ratio \tab numeric \tab - \tab  \tab \eqn{[0, 1]}{[0, 1]} \cr
   na.action \tab character \tab na.omit \tab na.omit, na.impute \tab - \cr
   nimpute \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   ntime \tab integer \tab 150 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   cause \tab untyped \tab - \tab  \tab - \cr
   proximity \tab character \tab FALSE \tab FALSE, TRUE, inbag, oob, all \tab - \cr
   distance \tab character \tab FALSE \tab FALSE, TRUE, inbag, oob, all \tab - \cr
   forest.wt \tab character \tab FALSE \tab FALSE, TRUE, inbag, oob, all \tab - \cr
   xvar.wt \tab untyped \tab - \tab  \tab - \cr
   split.wt \tab untyped \tab - \tab  \tab - \cr
   forest \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   var.used \tab character \tab FALSE \tab FALSE, all.trees \tab - \cr
   split.depth \tab character \tab FALSE \tab FALSE, all.trees, by.tree \tab - \cr
   seed \tab integer \tab - \tab  \tab \eqn{(-\infty, -1]}{(-Inf, -1]} \cr
   do.trace \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   statistics \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   get.tree \tab untyped \tab - \tab  \tab - \cr
   outcome \tab character \tab train \tab train, test \tab - \cr
   ptn.count \tab integer \tab 0 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   cores \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   save.memory \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   perf.type \tab character \tab - \tab none \tab - \cr
   case.depth \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   marginal.xvar \tab untyped \tab NULL \tab  \tab - \cr
}
}

\section{Initial parameter values}{

\itemize{
\item \code{ntime}: Number of time points to coerce the observed event times for use
in the estimated cumulative incidence functions during prediction.
We changed the default value of \code{150} to \code{0}, meaning we now use all the
\strong{unique event times from the train set} across all competing causes.
}
}

\section{Custom mlr3 parameters}{

\itemize{
\item \code{mtry}: This hyperparameter can alternatively be set via the added
hyperparameter \code{mtry.ratio} as \code{mtry = max(ceiling(mtry.ratio * n_features), 1)}.
Note that \code{mtry} and \code{mtry.ratio} are mutually exclusive.
\item \code{sampsize}: This hyperparameter can alternatively be set via the added
hyperparameter \code{sampsize.ratio} as \code{sampsize = max(ceiling(sampsize.ratio * n_obs), 1)}.
Note that \code{sampsize} and \code{sampsize.ratio} are mutually exclusive.
\item \code{cores}: This value is set as the option \code{rf.cores} during training and is
set to 1 by default.
}
}

\examples{
\dontshow{if (mlr3misc::require_namespaces(c("randomForestSRC", "riskRegression"), quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Define the Learner
learner = mlr3::lrn("cmprsk.rfsrc", importance = "TRUE")
print(learner)

# Define a Task
task = mlr3::tsk("pbc")

# Stratification based on event
task$set_col_roles(cols = "status", add_to = "stratum")

# Create train and test set
ids = mlr3::partition(task)

# Train the learner on the training ids
learner$train(task, row_ids = ids$train)

print(learner$model)
print(learner$importance(cause = 1)) # VIMP for cause = 1
print(learner$importance(cause = 2)) # VIMP for cause = 2
print(learner$oob_error()) # weighted-mean across causes

# Make predictions for the test rows
predictions = learner$predict(task, row_ids = ids$test)

# Score the predictions
predictions$score()
\dontshow{\}) # examplesIf}
}
\references{
Ishwaran, H., Gerds, A. T, Kogalur, B. U, Moore, D. R, Gange, J. S, Lau, M. B (2014).
\dQuote{Random survival forests for competing risks.}
\emph{Biostatistics}, \bold{15}(4), 757--773.
\doi{10.1093/BIOSTATISTICS/KXU010}, \url{https://doi.org/10.1093/BIOSTATISTICS/KXU010}.
}
\seealso{
\itemize{
\item \link[mlr3misc:Dictionary]{Dictionary} of \link[mlr3:Learner]{Learners}: \link[mlr3:mlr_learners]{mlr3::mlr_learners}.
\item \code{as.data.table(mlr_learners)} for a table of available \link[mlr3:Learner]{Learners} in the running session (depending on the loaded packages).
\item Chapter in the \href{https://mlr3book.mlr-org.com/}{mlr3book}: \url{https://mlr3book.mlr-org.com/basics.html#learners}
\item \CRANpkg{mlr3learners} for a selection of recommended learners.
\item \CRANpkg{mlr3cluster} for unsupervised clustering learners.
\item \CRANpkg{mlr3pipelines} to combine learners with pre- and postprocessing steps.
\item \CRANpkg{mlr3tuning} for tuning of hyperparameters, \CRANpkg{mlr3tuningspaces} for established default tuning spaces.
}
}
\author{
bblodfon
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3proba:LearnerCompRisks]{mlr3proba::LearnerCompRisks}} -> \code{LearnerCompRisksRandomForestSRC}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerCompRisksRandomForestSRC-new}{\code{LearnerCompRisksRandomForestSRC$new()}}
\item \href{#method-LearnerCompRisksRandomForestSRC-importance}{\code{LearnerCompRisksRandomForestSRC$importance()}}
\item \href{#method-LearnerCompRisksRandomForestSRC-selected_features}{\code{LearnerCompRisksRandomForestSRC$selected_features()}}
\item \href{#method-LearnerCompRisksRandomForestSRC-oob_error}{\code{LearnerCompRisksRandomForestSRC$oob_error()}}
\item \href{#method-LearnerCompRisksRandomForestSRC-clone}{\code{LearnerCompRisksRandomForestSRC$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="configure"><a href='../../mlr3/html/Learner.html#method-Learner-configure'><code>mlr3::Learner$configure()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="encapsulate"><a href='../../mlr3/html/Learner.html#method-Learner-encapsulate'><code>mlr3::Learner$encapsulate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerCompRisksRandomForestSRC-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerCompRisksRandomForestSRC-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerCompRisksRandomForestSRC$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerCompRisksRandomForestSRC-importance"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerCompRisksRandomForestSRC-importance}{}}}
\subsection{Method \code{importance()}}{
The importance scores are extracted from the model slot \code{importance} and
are cause-specific.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerCompRisksRandomForestSRC$importance(cause = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cause}}{Integer value indicating the event of interest}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Named \code{numeric()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerCompRisksRandomForestSRC-selected_features"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerCompRisksRandomForestSRC-selected_features}{}}}
\subsection{Method \code{selected_features()}}{
Selected features are extracted from the model slot \code{var.used}.

\strong{Note}: Due to a known issue in \code{randomForestSRC}, enabling \code{var.used = "all.trees"}
causes prediction to fail. Therefore, this setting should be used exclusively
for feature selection purposes and not when prediction is required.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerCompRisksRandomForestSRC$selected_features()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerCompRisksRandomForestSRC-oob_error"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerCompRisksRandomForestSRC-oob_error}{}}}
\subsection{Method \code{oob_error()}}{
Extracts the out-of-bag (OOB) cumulative incidence function (CIF) error
from the model's \code{err.rate} slot.

If \code{cause = "mean"} (default), the function returns a weighted average
of the cause-specific OOB errors, where the weights correspond to the
observed proportion of events for each cause in the training data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerCompRisksRandomForestSRC$oob_error(cause = "mean")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cause}}{Integer (event type) or \code{"mean"} (default). Use a specific
event type to retrieve its OOB error, or \code{"mean"} to compute the weighted
average across causes.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{numeric()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerCompRisksRandomForestSRC-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerCompRisksRandomForestSRC-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerCompRisksRandomForestSRC$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
