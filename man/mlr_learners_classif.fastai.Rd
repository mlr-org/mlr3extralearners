% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learner_fastai_classif_fastai.R
\name{mlr_learners_classif.fastai}
\alias{mlr_learners_classif.fastai}
\alias{LearnerClassifFastai}
\title{Classification Neural Network Learner}
\description{
Simple and fast neural nets for tabular data classification.
Calls \code{\link[fastai:tabular_learner]{fastai::tabular_learner()}} from package \CRANpkg{fastai}.
}
\section{Initial parameter values}{

\itemize{
\item \code{n_epoch}:
Needs to be set for \code{\link[fastai:reexports]{fastai::fit()}} to work.
If no value is given, it is set to 5.
\item \code{eval_metric}:
Needs to be set for \code{\link[fastai:reexports]{fastai::predict()}} to work.
If no value is given, it is set to \code{fastai::accuracy()}.
}
}

\section{Dictionary}{

This \link[mlr3:Learner]{Learner} can be instantiated via \link[mlr3:mlr_sugar]{lrn()}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{lrn("classif.fastai")
}\if{html}{\out{</div>}}
}

\section{Meta Information}{

\itemize{
\item Task type: \dQuote{classif}
\item Predict Types: \dQuote{response}, \dQuote{prob}
\item Feature Types: \dQuote{logical}, \dQuote{integer}, \dQuote{numeric}, \dQuote{factor}, \dQuote{ordered}
\item Required Packages: \CRANpkg{mlr3}, \CRANpkg{fastai}, \CRANpkg{reticulate}
}
}

\section{Parameters}{
\tabular{lllll}{
   Id \tab Type \tab Default \tab Levels \tab Range \cr
   act_cls \tab untyped \tab - \tab  \tab - \cr
   bn_cont \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   bn_final \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   drop_last \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   embed_p \tab numeric \tab 0 \tab  \tab \eqn{[0, 1]}{[0, 1]} \cr
   emb_szs \tab untyped \tab NULL \tab  \tab - \cr
   n_epoch \tab integer \tab - \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   eval_metric \tab untyped \tab - \tab  \tab - \cr
   layers \tab untyped \tab - \tab  \tab - \cr
   loss_func \tab untyped \tab - \tab  \tab - \cr
   lr \tab numeric \tab 0.001 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   metrics \tab untyped \tab - \tab  \tab - \cr
   n_out \tab integer \tab - \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
   num_workers \tab integer \tab 0 \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
   opt_func \tab untyped \tab - \tab  \tab - \cr
   patience \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   pin_memory \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   procs \tab untyped \tab NULL \tab  \tab - \cr
   ps \tab untyped \tab NULL \tab  \tab - \cr
   shuffle \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   train_bn \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   wd \tab integer \tab - \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   wd_bn_bias \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   use_bn \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   y_range \tab untyped \tab NULL \tab  \tab - \cr
   bs \tab integer \tab 50 \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
}
}

\examples{
\dontshow{if (mlr3misc::require_namespaces(lrn("classif.fastai")$packages, quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Define the Learner
learner = mlr3::lrn("classif.fastai")
print(learner)

# Define a Task
task = mlr3::tsk("sonar")

# Create train and test set
ids = mlr3::partition(task)

# Train the learner on the training ids
learner$train(task, row_ids = ids$train)

print(learner$model)


# Make predictions for the test rows
predictions = learner$predict(task, row_ids = ids$test)

# Score the predictions
predictions$score()
\dontshow{\}) # examplesIf}
}
\references{
Howard, Jeremy, Gugger, Sylvain (2020).
\dQuote{Fastai: A Layered API for Deep Learning.}
\emph{Information}, \bold{11}(2), 108.
ISSN 2078-2489, \doi{10.3390/info11020108}.
}
\seealso{
\itemize{
\item \link[mlr3misc:Dictionary]{Dictionary} of \link[mlr3:Learner]{Learners}: \link[mlr3:mlr_learners]{mlr3::mlr_learners}.
\item \code{as.data.table(mlr_learners)} for a table of available \link[mlr3:Learner]{Learners} in the running session (depending on the loaded packages).
\item Chapter in the \href{https://mlr3book.mlr-org.com/}{mlr3book}: \url{https://mlr3book.mlr-org.com/basics.html#learners}
\item \CRANpkg{mlr3learners} for a selection of recommended learners.
\item \CRANpkg{mlr3cluster} for unsupervised clustering learners.
\item \CRANpkg{mlr3pipelines} to combine learners with pre- and postprocessing steps.
\item \CRANpkg{mlr3tuning} for tuning of hyperparameters, \CRANpkg{mlr3tuningspaces} for established default tuning spaces.
}
}
\author{
annanzrv
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerClassif]{mlr3::LearnerClassif}} -> \code{LearnerClassifFastai}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{internal_valid_scores}}{(named \code{list()} or \code{NULL})
The validation scores extracted from \code{eval_protocol} which itself is set by fitting the \code{fastai::tab_learner}.
If early stopping is activated, this contains the validation scores of the model for the optimal \code{n_epoch},
otherwise the \code{n_epoch} for the final model.}

\item{\code{internal_tuned_values}}{(named \code{list()} or \code{NULL})
If early stopping is activated, this returns a list with \code{n_epoch},
which is the last epoch that yielded improvement w.r.t. the \code{patience}, extracted by \code{max(eval_protocol$epoch)+1}}

\item{\code{validate}}{(\code{numeric(1)} or \code{character(1)} or \code{NULL})
How to construct the internal validation data. This parameter can be either \code{NULL},
a ratio, \code{"test"}, or \code{"predefined"}.}

\item{\code{marshaled}}{(\code{logical(1)})
Whether the learner has been marshaled.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerClassifFastai-new}{\code{LearnerClassifFastai$new()}}
\item \href{#method-LearnerClassifFastai-marshal}{\code{LearnerClassifFastai$marshal()}}
\item \href{#method-LearnerClassifFastai-unmarshal}{\code{LearnerClassifFastai$unmarshal()}}
\item \href{#method-LearnerClassifFastai-clone}{\code{LearnerClassifFastai$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="configure"><a href='../../mlr3/html/Learner.html#method-Learner-configure'><code>mlr3::Learner$configure()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="encapsulate"><a href='../../mlr3/html/Learner.html#method-Learner-encapsulate'><code>mlr3::Learner$encapsulate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="selected_features"><a href='../../mlr3/html/Learner.html#method-Learner-selected_features'><code>mlr3::Learner$selected_features()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifFastai-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifFastai-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifFastai$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifFastai-marshal"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifFastai-marshal}{}}}
\subsection{Method \code{marshal()}}{
Marshal the learner's model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifFastai$marshal(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(any)\cr
Additional arguments passed to \code{\link[=marshal_model]{marshal_model()}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifFastai-unmarshal"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifFastai-unmarshal}{}}}
\subsection{Method \code{unmarshal()}}{
Unmarshal the learner's model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifFastai$unmarshal(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(any)\cr
Additional arguments passed to \code{\link[=unmarshal_model]{unmarshal_model()}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifFastai-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifFastai-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifFastai$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
