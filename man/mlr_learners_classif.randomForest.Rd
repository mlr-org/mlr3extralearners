% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learner_randomForest_classif_randomForest.R
\name{mlr_learners_classif.randomForest}
\alias{mlr_learners_classif.randomForest}
\alias{LearnerClassifRandomForest}
\title{Classification Random Forest Learner}
\description{
Random forest for classification.
Calls \code{\link[randomForest:randomForest]{randomForest::randomForest()}} from \CRANpkg{randomForest}.
}
\section{Dictionary}{

This \link{Learner} can be instantiated via the \link[mlr3misc:Dictionary]{dictionary} \link{mlr_learners} or with the associated sugar function \code{\link[=lrn]{lrn()}}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{mlr_learners$get("classif.randomForest")
lrn("classif.randomForest")
}\if{html}{\out{</div>}}
}

\section{Meta Information}{

\itemize{
\item Task type: \dQuote{classif}
\item Predict Types: \dQuote{response}, \dQuote{prob}
\item Feature Types: \dQuote{numeric}, \dQuote{factor}, \dQuote{ordered}
\item Required Packages: \CRANpkg{mlr3}, \CRANpkg{mlr3extralearners}, \CRANpkg{randomForest}
}
}

\section{Parameters}{
\tabular{lllll}{
   Id \tab Type \tab Default \tab Levels \tab Range \cr
   ntree \tab integer \tab 500 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   mtry \tab integer \tab - \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   replace \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   classwt \tab untyped \tab  \tab  \tab - \cr
   cutoff \tab untyped \tab - \tab  \tab - \cr
   strata \tab untyped \tab - \tab  \tab - \cr
   sampsize \tab untyped \tab - \tab  \tab - \cr
   nodesize \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   maxnodes \tab integer \tab - \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   importance \tab character \tab FALSE \tab accuracy, gini, none, FALSE \tab - \cr
   localImp \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   proximity \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   oob.prox \tab logical \tab - \tab TRUE, FALSE \tab - \cr
   norm.votes \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   do.trace \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   keep.forest \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   keep.inbag \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   predict.all \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   nodes \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
}
}

\examples{
learner = mlr3::lrn("classif.randomForest")
print(learner)

# available parameters:
learner$param_set$ids()
}
\references{
Breiman, Leo (2001).
\dQuote{Random Forests.}
\emph{Machine Learning}, \bold{45}(1), 5--32.
ISSN 1573-0565, \doi{10.1023/A:1010933404324}.
}
\seealso{
\itemize{
\item \link[mlr3misc:Dictionary]{Dictionary} of \link[mlr3:Learner]{Learners}: \link[mlr3:mlr_learners]{mlr3::mlr_learners}.
\item \code{as.data.table(mlr_learners)} for a table of available \link[=Learner]{Learners} in the running session (depending on the loaded packages).
\item Chapter in the \href{https://mlr3book.mlr-org.com/}{mlr3book}: \url{https://mlr3book.mlr-org.com/basics.html#learners}
\item \CRANpkg{mlr3learners} for a selection of recommended learners.
\item \CRANpkg{mlr3cluster} for unsupervised clustering learners.
\item \CRANpkg{mlr3pipelines} to combine learners with pre- and postprocessing steps.
\item \CRANpkg{mlr3tuning} for tuning of hyperparameters, \CRANpkg{mlr3tuningspaces} for established default tuning spaces.
}
}
\author{
pat-s
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerClassif]{mlr3::LearnerClassif}} -> \code{LearnerClassifRandomForest}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerClassifRandomForest-new}{\code{LearnerClassifRandomForest$new()}}
\item \href{#method-LearnerClassifRandomForest-importance}{\code{LearnerClassifRandomForest$importance()}}
\item \href{#method-LearnerClassifRandomForest-oob_error}{\code{LearnerClassifRandomForest$oob_error()}}
\item \href{#method-LearnerClassifRandomForest-clone}{\code{LearnerClassifRandomForest$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifRandomForest-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifRandomForest-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifRandomForest$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifRandomForest-importance"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifRandomForest-importance}{}}}
\subsection{Method \code{importance()}}{
The importance scores are extracted from the slot \code{importance}.
Parameter 'importance' must be set to either \code{"accuracy"} or \code{"gini"}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifRandomForest$importance()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Named \code{numeric()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifRandomForest-oob_error"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifRandomForest-oob_error}{}}}
\subsection{Method \code{oob_error()}}{
OOB errors are extracted from the model slot \code{err.rate}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifRandomForest$oob_error()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{numeric(1)}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerClassifRandomForest-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerClassifRandomForest-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerClassifRandomForest$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
