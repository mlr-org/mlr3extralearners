% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/learner_aorsf_surv_aorsf.R
\name{mlr_learners_surv.aorsf}
\alias{mlr_learners_surv.aorsf}
\alias{LearnerSurvAorsf}
\title{Accelerated Oblique Random Survival Forest Learner}
\description{
Accelerated oblique random survival forest.
Calls \code{\link[aorsf:orsf]{aorsf::orsf()}} from \CRANpkg{aorsf}.
Note that although the learner has the property \code{"missing"} and it can in
principle deal with missing values, the behaviour has to be configured using
the parameter \code{na_action}.
}
\section{Initial parameter values}{

\itemize{
\item \code{n_thread}: This parameter is initialized to 1 (default is 0) to avoid conflicts with the mlr3 parallelization.
}


\itemize{
\item \code{mtry}:
\itemize{
\item This hyperparameter can alternatively be set via the added hyperparameter \code{mtry_ratio}
as \code{mtry = max(ceiling(mtry_ratio * n_features), 1)}.
Note that \code{mtry} and \code{mtry_ratio} are mutually exclusive.
}
}
}

\section{Prediction types}{

This learner returns three prediction types:
\enumerate{
\item \code{distr}: a survival matrix in two dimensions, where observations are
represented in rows and (unique event) time points in columns.
Calculated using the internal \code{predict.ObliqueForest()} function.
\item \code{response}: the restricted mean survival time of each test observation,
derived from the survival matrix prediction (\code{distr}).
\item \code{crank}: the expected mortality using \code{\link[mlr3proba:dot-surv_return]{mlr3proba::.surv_return()}}.
}
}

\section{Dictionary}{

This \link[mlr3:Learner]{Learner} can be instantiated via \link[mlr3:mlr_sugar]{lrn()}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{lrn("surv.aorsf")
}\if{html}{\out{</div>}}
}

\section{Meta Information}{

\itemize{
\item Task type: \dQuote{surv}
\item Predict Types: \dQuote{crank}, \dQuote{distr}, \dQuote{response}
\item Feature Types: \dQuote{integer}, \dQuote{numeric}, \dQuote{factor}, \dQuote{ordered}
\item Required Packages: \CRANpkg{mlr3}, \CRANpkg{mlr3proba}, \CRANpkg{mlr3extralearners}, \CRANpkg{aorsf}, \CRANpkg{pracma}
}
}

\section{Parameters}{
\tabular{lllll}{
   Id \tab Type \tab Default \tab Levels \tab Range \cr
   n_tree \tab integer \tab 500 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   n_split \tab integer \tab 5 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   n_retry \tab integer \tab 3 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   n_thread \tab integer \tab 0 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   pred_aggregate \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   pred_simplify \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   oobag \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   mtry \tab integer \tab NULL \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   mtry_ratio \tab numeric \tab - \tab  \tab \eqn{[0, 1]}{[0, 1]} \cr
   sample_with_replacement \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   sample_fraction \tab numeric \tab 0.632 \tab  \tab \eqn{[0, 1]}{[0, 1]} \cr
   control_type \tab character \tab fast \tab fast, cph, net \tab - \cr
   split_rule \tab character \tab logrank \tab logrank, cstat \tab - \cr
   control_fast_do_scale \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   control_fast_ties \tab character \tab efron \tab efron, breslow \tab - \cr
   control_cph_ties \tab character \tab efron \tab efron, breslow \tab - \cr
   control_cph_eps \tab numeric \tab 1e-09 \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   control_cph_iter_max \tab integer \tab 20 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   control_net_alpha \tab numeric \tab 0.5 \tab  \tab \eqn{(-\infty, \infty)}{(-Inf, Inf)} \cr
   control_net_df_target \tab integer \tab NULL \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   leaf_min_events \tab integer \tab 1 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   leaf_min_obs \tab integer \tab 5 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   split_min_events \tab integer \tab 5 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   split_min_obs \tab integer \tab 10 \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   split_min_stat \tab numeric \tab NULL \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   oobag_pred_type \tab character \tab risk \tab none, surv, risk, chf, mort \tab - \cr
   importance \tab character \tab anova \tab none, anova, negate, permute \tab - \cr
   importance_max_pvalue \tab numeric \tab 0.01 \tab  \tab \eqn{[1e-04, 0.9999]}{[1e-04, 0.9999]} \cr
   tree_seeds \tab integer \tab NULL \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   oobag_pred_horizon \tab numeric \tab NULL \tab  \tab \eqn{[0, \infty)}{[0, Inf)} \cr
   oobag_eval_every \tab integer \tab NULL \tab  \tab \eqn{[1, \infty)}{[1, Inf)} \cr
   oobag_fun \tab untyped \tab NULL \tab  \tab - \cr
   attach_data \tab logical \tab TRUE \tab TRUE, FALSE \tab - \cr
   verbose_progress \tab logical \tab FALSE \tab TRUE, FALSE \tab - \cr
   na_action \tab character \tab fail \tab fail, omit, impute_meanmode \tab - \cr
}
}

\examples{
\dontshow{if (mlr3misc::require_namespaces(lrn("surv.aorsf")$packages, quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Define the Learner
learner = mlr3::lrn("surv.aorsf")
print(learner)

# Define a Task
task = mlr3::tsk("grace")

# Create train and test set
ids = mlr3::partition(task)

# Train the learner on the training ids
learner$train(task, row_ids = ids$train)

print(learner$model)
print(learner$importance())

# Make predictions for the test rows
predictions = learner$predict(task, row_ids = ids$test)

# Score the predictions
predictions$score()
\dontshow{\}) # examplesIf}
}
\references{
Jaeger BC, Long DL, Long DM, Sims M, Szychowski JM, Min Y, Mcclure LA, Howard G, Simon N (2019).
\dQuote{Oblique random survival forests.}
\emph{The Annals of Applied Statistics}, \bold{13}(3).
\doi{10.1214/19-aoas1261}.

Jaeger BC, Welden S, Lenoir K, Speiser JL, Segar MW, Pandey A, Pajewski NM (2023).
\dQuote{Accelerated and interpretable oblique random survival forests.}
\emph{Journal of Computational and Graphical Statistics}, 1--16.
\doi{10.1080/10618600.2023.2231048}.
}
\seealso{
\itemize{
\item \link[mlr3misc:Dictionary]{Dictionary} of \link[mlr3:Learner]{Learners}: \link[mlr3:mlr_learners]{mlr3::mlr_learners}.
\item \code{as.data.table(mlr_learners)} for a table of available \link[mlr3:Learner]{Learners} in the running session (depending on the loaded packages).
\item Chapter in the \href{https://mlr3book.mlr-org.com/}{mlr3book}: \url{https://mlr3book.mlr-org.com/basics.html#learners}
\item \CRANpkg{mlr3learners} for a selection of recommended learners.
\item \CRANpkg{mlr3cluster} for unsupervised clustering learners.
\item \CRANpkg{mlr3pipelines} to combine learners with pre- and postprocessing steps.
\item \CRANpkg{mlr3tuning} for tuning of hyperparameters, \CRANpkg{mlr3tuningspaces} for established default tuning spaces.
}
}
\author{
bcjaeger
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3proba:LearnerSurv]{mlr3proba::LearnerSurv}} -> \code{LearnerSurvAorsf}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerSurvAorsf-new}{\code{LearnerSurvAorsf$new()}}
\item \href{#method-LearnerSurvAorsf-oob_error}{\code{LearnerSurvAorsf$oob_error()}}
\item \href{#method-LearnerSurvAorsf-importance}{\code{LearnerSurvAorsf$importance()}}
\item \href{#method-LearnerSurvAorsf-clone}{\code{LearnerSurvAorsf$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="encapsulate"><a href='../../mlr3/html/Learner.html#method-Learner-encapsulate'><code>mlr3::Learner$encapsulate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerSurvAorsf-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerSurvAorsf-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerSurvAorsf$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerSurvAorsf-oob_error"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerSurvAorsf-oob_error}{}}}
\subsection{Method \code{oob_error()}}{
OOB concordance error extracted from the model slot
\code{eval_oobag$stat_values}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerSurvAorsf$oob_error()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{numeric()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerSurvAorsf-importance"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerSurvAorsf-importance}{}}}
\subsection{Method \code{importance()}}{
The importance scores are extracted from the model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerSurvAorsf$importance()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Named \code{numeric()}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerSurvAorsf-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerSurvAorsf-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerSurvAorsf$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
