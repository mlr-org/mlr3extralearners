% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/paramset_to_configspace.R
\name{paramset_to_configspace}
\alias{paramset_to_configspace}
\title{Convert a paradox ParamSet to a ConfigSpace ConfigurationSpace}
\usage{
paramset_to_configspace(ps, name = NULL)
}
\arguments{
\item{ps}{\link[paradox:ParamSet]{paradox::ParamSet}\cr The parameter set to convert.}

\item{name}{\code{character(1)}\cr Optional name for the resulting ConfigurationSpace.}
}
\value{
A Python \code{ConfigSpace.ConfigurationSpace} object.
}
\description{
Translates a \code{\link[paradox:ParamSet]{paradox::ParamSet}} into a Python
\code{\link{ConfigSpace.ConfigurationSpace}} via \strong{reticulate}.
}
\details{
Supported parameter types:
\itemize{
\item \code{ParamDbl}  => \code{Float} / \code{UniformFloatHyperparameter}
\item \code{ParamInt}  => \code{Integer} / \code{UniformIntegerHyperparameter}
\item \code{ParamLgl}  => \code{Categorical(TRUE/FALSE)}
\item \code{ParamFct}  => \code{Categorical}
}

Utility parameters (\code{ParamUty}) are not representable in ConfigSpace and are skipped
with an explicit warning listing their IDs.

Dependency conditions (\code{CondEqual}, \code{CondIn}) are preserved. Multiple conditions
on the same child are combined using \code{ConfigSpace.AndConjunction}.

The function auto-detects old vs. new ConfigSpace APIs:
\itemize{
\item New (>= 1.0): \code{ConfigSpace$Float}, \code{ConfigSpace$Integer}, \code{ConfigSpace$Categorical},
\code{cs$add()}, \code{cs$add_condition()} and conditions in \code{ConfigSpace$conditions}.
\item Old: \verb{ConfigSpace$hyperparameters$*Hyperparameter}, \code{cs$add_hyperparameter()},
\code{cs$add_condition()}, and conditions at top level.
}
}
\examples{
\dontrun{
  ps = paradox::ps(
    lr        = p_dbl(lower = 1e-5, upper = 1,   default = 0.01, tags = "train"),
    ntree     = p_int(lower = 10,   upper = 500, default = 100,  tags = c("train","tuning")),
    bootstrap = p_lgl(default = TRUE, tags = "train"),
    criterion = p_fct(levels = c("gini", "entropy", "other"), default = "gini", tags = "train"),
    extras    = p_fct(tags = "predict", levels = c("alpha","beta","gamma","delta","kappa","nu")),
    depending = p_lgl(tags = "train",
                      depends = quote(criterion == "entropy" && extras \%in\% c("alpha","beta")))
  )
  cs = paramset_to_configspace(ps, name = "demo")
}
}
