
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mlr3extralearners"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mlr3extralearners')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("create_learner")
> ### * create_learner
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_learner
> ### Title: Create a New Learner
> ### Aliases: create_learner
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Simpler linear regression example
> ##D create_learner(
> ##D   classname = "LM",
> ##D   algorithm = "linear regression",
> ##D   type = "regr",
> ##D   package = "stats",
> ##D   caller = "lm",
> ##D   feature_types = c("logical", "integer", "numeric", "factor"),
> ##D   predict_types = c("response", "se"),
> ##D   properties = "weights",
> ##D   gh_name = "RaphaelS1"
> ##D )
> ##D 
> ##D # Slightly more complex random forest learner
> ##D create_learner(
> ##D   classname = "RandomForestSRC",
> ##D   algorithm = "random forest",
> ##D   type = "surv",
> ##D   package = "randomForestSRC",
> ##D   caller = "rfsrc",
> ##D   feature_types = c("logical", "integer", "numeric", "factor"),
> ##D   predict_types = c("crank", "distr"),
> ##D   properties = c("importance", "missings", "oob_error", "weights"),
> ##D   references = TRUE,
> ##D   gh_name = "RaphaelS1"
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("list_mlr3learners")
> ### * list_mlr3learners
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: list_mlr3learners
> ### Title: List Learners in mlr3verse
> ### Aliases: list_mlr3learners
> 
> ### ** Examples
> 
> list_mlr3learners(
+   select = c("id", "properties", "predict_types"),
+   filter = list(class = "surv", predict_types = "distr"))
                  id                                    properties
 1:     surv.akritas                                              
 2:  surv.blackboost                                       weights
 3:     surv.cforest                                       weights
 4:    surv.coxboost                                       weights
 5:       surv.coxph                                       weights
 6:     surv.coxtime                                              
 7:       surv.ctree                                       weights
 8: surv.cv_coxboost                                       weights
 9:     surv.deephit                                              
10:    surv.deepsurv                                              
11:     surv.dnnsurv                                              
12:    surv.flexible                                       weights
13:    surv.gamboost          importance,selected_features,weights
14:    surv.glmboost                                       weights
15:      surv.kaplan                                      missings
16:      surv.loghaz                                              
17:      surv.mboost          importance,selected_features,weights
18:      surv.nelson                                      missings
19:  surv.obliqueRSF                            missings,oob_error
20:  surv.parametric                                       weights
21:    surv.pchazard                                              
22:   surv.penalized                                              
23:      surv.ranger                  importance,oob_error,weights
24:       surv.rfsrc         importance,missings,oob_error,weights
25:       surv.rpart importance,missings,selected_features,weights
                  id                                    properties
     predict_types
 1:    crank,distr
 2: distr,crank,lp
 3:    distr,crank
 4: distr,crank,lp
 5: distr,crank,lp
 6:    crank,distr
 7:    distr,crank
 8: distr,crank,lp
 9:    crank,distr
10:    crank,distr
11:    crank,distr
12: distr,crank,lp
13: distr,crank,lp
14: distr,crank,lp
15:    crank,distr
16:    crank,distr
17: distr,crank,lp
18:    crank,distr
19:    crank,distr
20: distr,lp,crank
21:    crank,distr
22:    distr,crank
23:    distr,crank
24:    crank,distr
25:    crank,distr
     predict_types
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.AdaBoostM1")
> ### * mlr_learners_classif.AdaBoostM1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.AdaBoostM1
> ### Title: Classification AdaBoostM1 Learner
> ### Aliases: mlr_learners_classif.AdaBoostM1 LearnerClassifAdaBoostM1
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.AdaBoostM1")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifAdaBoostM1:classif.AdaBoostM1>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: multiclass, twoclass
 [1] "subset"                    "na.action"                
 [3] "P"                         "Q"                        
 [5] "S"                         "I"                        
 [7] "W"                         "output_debug_info"        
 [9] "do_not_check_capabilities" "num_decimal_places"       
[11] "batch_size"                "options"                  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.IBk")
> ### * mlr_learners_classif.IBk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.IBk
> ### Title: Classification IBk Learner
> ### Aliases: mlr_learners_classif.IBk LearnerClassifIBk
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.IBk")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifIBk:classif.IBk>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: multiclass, twoclass
 [1] "subset"                    "na.action"                
 [3] "I"                         "F"                        
 [5] "K"                         "E"                        
 [7] "W"                         "X"                        
 [9] "A"                         "output_debug_info"        
[11] "do_not_check_capabilities" "num_decimal_places"       
[13] "batch_size"                "options"                  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.J48")
> ### * mlr_learners_classif.J48
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.J48
> ### Title: Classification J48 Learner
> ### Aliases: mlr_learners_classif.J48 LearnerClassifJ48
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.J48")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifJ48:classif.J48>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: missings, multiclass, twoclass
 [1] "subset"                         "na.action"                     
 [3] "U"                              "O"                             
 [5] "C"                              "M"                             
 [7] "R"                              "N"                             
 [9] "B"                              "S"                             
[11] "L"                              "A"                             
[13] "J"                              "Q"                             
[15] "doNotMakeSplitPointActualValue" "output_debug_info"             
[17] "do_not_check_capabilities"      "num_decimal_places"            
[19] "batch_size"                     "options"                       
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.JRip")
> ### * mlr_learners_classif.JRip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.JRip
> ### Title: Classification JRip Learner
> ### Aliases: mlr_learners_classif.JRip LearnerClassifJRip
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.JRip")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifJRip:classif.JRip>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: multiclass, twoclass
 [1] "subset"                    "na.action"                
 [3] "F"                         "N"                        
 [5] "O"                         "D"                        
 [7] "S"                         "E"                        
 [9] "P"                         "output_debug_info"        
[11] "do_not_check_capabilities" "num_decimal_places"       
[13] "batch_size"                "options"                  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.LMT")
> ### * mlr_learners_classif.LMT
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.LMT
> ### Title: Classification Logistic Model Trees Learner
> ### Aliases: mlr_learners_classif.LMT LearnerClassifLMT
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.LMT")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifLMT:classif.LMT>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: multiclass, twoclass
 [1] "subset"                         "na.action"                     
 [3] "B"                              "R"                             
 [5] "C"                              "P"                             
 [7] "I"                              "M"                             
 [9] "W"                              "A"                             
[11] "doNotMakeSplitPointActualValue" "output_debug_info"             
[13] "do_not_check_capabilities"      "num_decimal_places"            
[15] "batch_size"                     "options"                       
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.OneR")
> ### * mlr_learners_classif.OneR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.OneR
> ### Title: Classification OneR Learner
> ### Aliases: mlr_learners_classif.OneR LearnerClassifOneR
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.OneR")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifOneR:classif.OneR>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: multiclass, twoclass
[1] "subset"                    "na.action"                
[3] "B"                         "output_debug_info"        
[5] "do_not_check_capabilities" "num_decimal_places"       
[7] "batch_size"                "options"                  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.PART")
> ### * mlr_learners_classif.PART
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.PART
> ### Title: Classification PART Learner
> ### Aliases: mlr_learners_classif.PART LearnerClassifPART
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.PART")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifPART:classif.PART>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: missings, multiclass, twoclass
 [1] "subset"                         "na.action"                     
 [3] "C"                              "M"                             
 [5] "R"                              "N"                             
 [7] "B"                              "U"                             
 [9] "J"                              "Q"                             
[11] "doNotMakeSplitPointActualValue" "output_debug_info"             
[13] "do_not_check_capabilities"      "num_decimal_places"            
[15] "batch_size"                     "options"                       
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.bart")
> ### * mlr_learners_classif.bart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.bart
> ### Title: Classification BART (Bayesian Additive Regression Trees) Learner
> ### Aliases: mlr_learners_classif.bart LearnerClassifBart
> 
> ### ** Examples
> 
> if (requireNamespace("dbarts", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.bart")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifBart:classif.bart>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, dbarts
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: twoclass, weights
 [1] "ntree"         "k"             "power"         "base"         
 [5] "binaryOffset"  "ndpost"        "nskip"         "printevery"   
 [9] "keepevery"     "keeptrainfits" "usequants"     "numcut"       
[13] "printcutoffs"  "verbose"       "keepcall"      "sampleronly"  
[17] "seed"          "proposalprobs"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.catboost")
> ### * mlr_learners_classif.catboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.catboost
> ### Title: Gradient Boosted Decision Trees Classification Learner
> ### Aliases: mlr_learners_classif.catboost LearnerClassifCatboost
> 
> ### ** Examples
> 
> if (requireNamespace("catboost", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.catboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifCatboost:classif.catboost>
* Model: -
* Parameters: loss_function_twoclass=Logloss,
  loss_function_multiclass=MultiClass, logging_level=Silent,
  thread_count=1, allow_writing_files=FALSE, save_snapshot=FALSE
* Packages: mlr3, mlr3extralearners, catboost
* Predict Type: response
* Feature types: numeric, factor, ordered
* Properties: importance, missings, multiclass, twoclass, weights
 [1] "loss_function_twoclass"         "loss_function_multiclass"      
 [3] "iterations"                     "learning_rate"                 
 [5] "random_seed"                    "l2_leaf_reg"                   
 [7] "bootstrap_type"                 "bagging_temperature"           
 [9] "subsample"                      "sampling_frequency"            
[11] "sampling_unit"                  "mvs_reg"                       
[13] "random_strength"                "depth"                         
[15] "grow_policy"                    "min_data_in_leaf"              
[17] "max_leaves"                     "ignored_features"              
[19] "one_hot_max_size"               "has_time"                      
[21] "rsm"                            "nan_mode"                      
[23] "fold_permutation_block"         "leaf_estimation_method"        
[25] "leaf_estimation_iterations"     "leaf_estimation_backtracking"  
[27] "fold_len_multiplier"            "approx_on_full_history"        
[29] "class_weights"                  "auto_class_weights"            
[31] "boosting_type"                  "boost_from_average"            
[33] "langevin"                       "diffusion_temperature"         
[35] "score_function"                 "monotone_constraints"          
[37] "feature_weights"                "first_feature_use_penalties"   
[39] "penalties_coefficient"          "per_object_feature_penalties"  
[41] "model_shrink_rate"              "model_shrink_mode"             
[43] "target_border"                  "border_count"                  
[45] "feature_border_type"            "per_float_feature_quantization"
[47] "classes_count"                  "thread_count"                  
[49] "task_type"                      "devices"                       
[51] "logging_level"                  "metric_period"                 
[53] "train_dir"                      "model_size_reg"                
[55] "allow_writing_files"            "save_snapshot"                 
[57] "snapshot_file"                  "snapshot_interval"             
[59] "simple_ctr"                     "combinations_ctr"              
[61] "ctr_target_border_count"        "counter_calc_method"           
[63] "max_ctr_complexity"             "ctr_leaf_count_limit"          
[65] "store_all_simple_ctr"           "final_ctr_computation_mode"    
[67] "verbose"                        "ntree_start"                   
[69] "ntree_end"                     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.cforest")
> ### * mlr_learners_classif.cforest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.cforest
> ### Title: Classification Conditional Random Forest Learner
> ### Aliases: mlr_learners_classif.cforest LearnerClassifCForest
> 
> ### ** Examples
> 
> if (requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.cforest")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifCForest:classif.cforest>
* Model: -
* Parameters: teststat=quadratic, testtype=Univariate, mincriterion=0,
  saveinfo=FALSE
* Packages: mlr3, mlr3extralearners, partykit, sandwich, coin
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: multiclass, oob_error, twoclass, weights
 [1] "ntree"           "replace"         "fraction"        "mtry"           
 [5] "mtryratio"       "applyfun"        "cores"           "trace"          
 [9] "offset"          "cluster"         "scores"          "teststat"       
[13] "splitstat"       "splittest"       "testtype"        "nmax"           
[17] "pargs"           "alpha"           "mincriterion"    "logmincriterion"
[21] "minsplit"        "minbucket"       "minprob"         "stump"          
[25] "lookahead"       "MIA"             "nresample"       "tol"            
[29] "maxsurrogate"    "numsurrogate"    "maxdepth"        "multiway"       
[33] "splittry"        "intersplit"      "majority"        "caseweights"    
[37] "saveinfo"        "update"          "splitflavour"    "maxvar"         
[41] "OOB"             "simplify"        "scale"           "nperm"          
[45] "risk"            "conditional"     "threshold"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.ctree")
> ### * mlr_learners_classif.ctree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.ctree
> ### Title: Classification Conditional Inference Tree Learner
> ### Aliases: mlr_learners_classif.ctree LearnerClassifCTree
> 
> ### ** Examples
> 
> if (requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.ctree")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifCTree:classif.ctree>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, partykit, sandwich, coin
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: multiclass, twoclass, weights
 [1] "teststat"        "splitstat"       "splittest"       "testtype"       
 [5] "nmax"            "alpha"           "mincriterion"    "logmincriterion"
 [9] "minsplit"        "minbucket"       "minprob"         "stump"          
[13] "lookahead"       "MIA"             "nresample"       "tol"            
[17] "maxsurrogate"    "numsurrogate"    "mtry"            "maxdepth"       
[21] "multiway"        "splittry"        "intersplit"      "majority"       
[25] "caseweights"     "maxvar"          "applyfun"        "cores"          
[29] "saveinfo"        "update"          "splitflavour"    "offset"         
[33] "cluster"         "scores"          "doFit"           "maxpts"         
[37] "abseps"          "releps"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.earth")
> ### * mlr_learners_classif.earth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.earth
> ### Title: Classification MARS (Multivariate Adaptive Regression Splines)
> ###   Learner
> ### Aliases: mlr_learners_classif.earth LearnerClassifEarth
> 
> ### ** Examples
> 
> if (requireNamespace("earth", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.earth")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifEarth:classif.earth>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, earth
* Predict Type: response
* Feature types: numeric, factor, integer
* Properties: twoclass, weights
 [1] "wp"              "offset"          "keepxy"          "trace"          
 [5] "degree"          "penalty"         "nk"              "thresh"         
 [9] "minspan"         "endspan"         "newvar.penalty"  "fast.k"         
[13] "fast.beta"       "linpreds"        "allowed"         "pmethod"        
[17] "nprune"          "nfold"           "ncross"          "stratify"       
[21] "varmod.method"   "varmod.exponent" "varmod.conv"     "varmod.clamp"   
[25] "varmod.minspan"  "Scale.y"         "Adjust.endspan"  "Auto.linpreds"  
[29] "Force.weights"   "Use.beta.cache"  "Force.xtx.prune" "Get.leverages"  
[33] "Exhaustive.tol" 
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.extratrees")
> ### * mlr_learners_classif.extratrees
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.extratrees
> ### Title: Classification ExtraTrees Learner
> ### Aliases: mlr_learners_classif.extratrees LearnerClassifExtraTrees
> 
> ### ** Examples
> 
> if (requireNamespace("extraTrees", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.extratrees")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifExtraTrees:classif.extratrees>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, extraTrees
* Predict Type: response
* Feature types: integer, numeric
* Properties: multiclass, twoclass, weights
 [1] "ntree"             "mtry"              "nodesize"         
 [4] "numRandomCuts"     "evenCuts"          "numThreads"       
 [7] "subsetSizes"       "subsetGroups"      "tasks"            
[10] "probOfTaskCuts"    "numRandomTaskCuts" "na.action"        
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.fnn")
> ### * mlr_learners_classif.fnn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.fnn
> ### Title: Classification Fast Nearest Neighbor Search Learner
> ### Aliases: mlr_learners_classif.fnn LearnerClassifFNN
> 
> ### ** Examples
> 
> if (requireNamespace("FNN", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.fnn")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifFNN:classif.fnn>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, FNN
* Predict Type: response
* Feature types: integer, numeric
* Properties: multiclass, twoclass
[1] "k"         "algorithm"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.gam")
> ### * mlr_learners_classif.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.gam
> ### Title: Classification Generalized Additive Model Learner
> ### Aliases: mlr_learners_classif.gam LearnerClassifGam
> 
> ### ** Examples
> 
> 
> # simple example
> t = mlr3::tsk("spam")
> l = mlr3::lrn("classif.gam")
> l$param_set$values$formula = type ~ s(george) + s(charDollar) + s(edu) + ti(george, edu)
> l$train(t)
> l$model

Family: binomial 
Link function: logit 

Formula:
type ~ s(george) + s(charDollar) + s(edu) + ti(george, edu)

Estimated degrees of freedom:
1.00 5.42 1.00 5.05  total = 13.47 

UBRE score: -0.1759489     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.gamboost")
> ### * mlr_learners_classif.gamboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.gamboost
> ### Title: Boosted Generalized Additive Classification Learner
> ### Aliases: mlr_learners_classif.gamboost LearnerClassifGAMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mboost", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.gamboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifGAMBoost:classif.gamboost>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, mboost
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: twoclass, weights
 [1] "baselearner"   "dfbase"        "offset"        "family"       
 [5] "custom.family" "link"          "type"          "mstop"        
 [9] "nu"            "risk"          "oobweights"    "trace"        
[13] "stopintern"    "na.action"    
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.gausspr")
> ### * mlr_learners_classif.gausspr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.gausspr
> ### Title: Classifession Gaussian Process Learner
> ### Aliases: mlr_learners_classif.gausspr LearnerClassifGausspr
> 
> ### ** Examples
> 
> if (requireNamespace("kernlab", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.gausspr")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifGausspr:classif.gausspr>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, kernlab
* Predict Type: response
* Feature types: numeric, integer, logical, character, factor, ordered
* Properties: multiclass, twoclass
 [1] "scaled"    "kernel"    "sigma"     "degree"    "scale"     "offset"   
 [7] "order"     "kpar"      "tol"       "fit"       "na.action" "coupler"  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.gbm")
> ### * mlr_learners_classif.gbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.gbm
> ### Title: Classification Gradient Boosting Machine Learner
> ### Aliases: mlr_learners_classif.gbm LearnerClassifGBM
> 
> ### ** Examples
> 
> if (requireNamespace("gbm", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.gbm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifGBM:classif.gbm>
* Model: -
* Parameters: keep.data=FALSE, n.cores=1
* Packages: mlr3, mlr3extralearners, gbm
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: importance, missings, multiclass, twoclass, weights
 [1] "distribution"      "n.trees"           "interaction.depth"
 [4] "n.minobsinnode"    "shrinkage"         "bag.fraction"     
 [7] "train.fraction"    "cv.folds"          "keep.data"        
[10] "verbose"           "n.cores"           "var.monotone"     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.glmboost")
> ### * mlr_learners_classif.glmboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.glmboost
> ### Title: Boosted Generalized Linear Classification Learner
> ### Aliases: mlr_learners_classif.glmboost LearnerClassifGLMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mboost", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.glmboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifGLMBoost:classif.glmboost>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, mboost
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: twoclass, weights
 [1] "offset"        "family"        "custom.family" "link"         
 [5] "type"          "center"        "mstop"         "nu"           
 [9] "risk"          "oobweights"    "trace"         "stopintern"   
[13] "na.action"     "contrasts.arg"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.ksvm")
> ### * mlr_learners_classif.ksvm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.ksvm
> ### Title: Classification Kernlab Support Vector Machine
> ### Aliases: mlr_learners_classif.ksvm LearnerClassifKSVM
> 
> ### ** Examples
> 
> if (requireNamespace("kernlab", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.ksvm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifKSVM:classif.ksvm>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, kernlab
* Predict Type: response
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: multiclass, twoclass, weights
 [1] "scaled"    "type"      "kernel"    "C"         "nu"        "cache"    
 [7] "tol"       "shrinking" "sigma"     "degree"    "scale"     "order"    
[13] "offset"    "coupler"  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.liblinear")
> ### * mlr_learners_classif.liblinear
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.liblinear
> ### Title: LiblineaR Classification Learner
> ### Aliases: mlr_learners_classif.liblinear LearnerClassifLiblineaR
> 
> ### ** Examples
> 
> if (requireNamespace("LiblineaR", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.liblinear")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifLiblineaR:classif.liblinear>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, LiblineaR
* Predict Type: response
* Feature types: numeric
* Properties: multiclass, twoclass
[1] "type"     "cost"     "epsilon"  "bias"     "cross"    "verbose"  "wi"      
[8] "findC"    "useInitC"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.lightgbm")
> ### * mlr_learners_classif.lightgbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.lightgbm
> ### Title: Classification Light GBM Learner
> ### Aliases: mlr_learners_classif.lightgbm LearnerClassifLightGBM
> 
> ### ** Examples
> 
> if (requireNamespace("lightgbm", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.lightgbm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifLightGBM:classif.lightgbm>
* Model: -
* Parameters: num_threads=1, verbose=-1
* Packages: mlr3, mlr3extralearners, lightgbm
* Predict Type: prob
* Feature types: numeric, integer
* Properties: importance, missings, multiclass, twoclass, weights
  [1] "nrounds"                       "objective"                    
  [3] "metric"                        "custom_eval"                  
  [5] "verbose"                       "record"                       
  [7] "eval_freq"                     "init_model"                   
  [9] "early_stopping_rounds"         "early_stopping_split"         
 [11] "callbacks"                     "reset_data"                   
 [13] "categorical_feature"           "boosting"                     
 [15] "linear_tree"                   "num_iterations"               
 [17] "learning_rate"                 "num_leaves"                   
 [19] "tree_learner"                  "num_threads"                  
 [21] "device_type"                   "seed"                         
 [23] "deterministic"                 "force_col_wise"               
 [25] "force_row_wise"                "histogram_pool_size"          
 [27] "max_depth"                     "min_data_in_leaf"             
 [29] "min_sum_hessian_in_leaf"       "bagging_fraction"             
 [31] "pos_bagging_fraction"          "neg_bagging_fraction"         
 [33] "bagging_freq"                  "bagging_seed"                 
 [35] "feature_fraction"              "feature_fraction_bynode"      
 [37] "feature_fraction_seed"         "extra_trees"                  
 [39] "extra_seed"                    "first_metric_only"            
 [41] "max_delta_step"                "lambda_l1"                    
 [43] "lambda_l2"                     "linear_lambda"                
 [45] "min_gain_to_split"             "drop_rate"                    
 [47] "max_drop"                      "skip_drop"                    
 [49] "xgboost_dart_mode"             "uniform_drop"                 
 [51] "drop_seed"                     "top_rate"                     
 [53] "other_rate"                    "min_data_per_group"           
 [55] "max_cat_threshold"             "cat_l2"                       
 [57] "cat_smooth"                    "max_cat_to_onehot"            
 [59] "top_k"                         "monotone_constraints"         
 [61] "monotone_constraints_method"   "monotone_penalty"             
 [63] "feature_contri"                "forcedsplits_filename"        
 [65] "refit_decay_rate"              "cegb_tradeoff"                
 [67] "cegb_penalty_split"            "cegb_penalty_feature_lazy"    
 [69] "cegb_penalty_feature_coupled"  "path_smooth"                  
 [71] "interaction_constraints"       "input_model"                  
 [73] "output_model"                  "saved_feature_importance_type"
 [75] "snapshot_freq"                 "max_bin"                      
 [77] "max_bin_by_feature"            "min_data_in_bin"              
 [79] "bin_construct_sample_cnt"      "data_random_seed"             
 [81] "is_enable_sparse"              "enable_bundle"                
 [83] "use_missing"                   "zero_as_missing"              
 [85] "feature_pre_filter"            "pre_partition"                
 [87] "two_round"                     "header"                       
 [89] "group_column"                  "forcedbins_filename"          
 [91] "save_binary"                   "objective_seed"               
 [93] "is_unbalance"                  "scale_pos_weight"             
 [95] "sigmoid"                       "boost_from_average"           
 [97] "lambdarank_truncation_level"   "lambdarank_norm"              
 [99] "label_gain"                    "metric_freq"                  
[101] "is_provide_training_metric"    "eval_at"                      
[103] "multi_error_top_k"             "auc_mu_weights"               
[105] "num_machines"                  "local_listen_port"            
[107] "time_out"                      "machine_list_filename"        
[109] "machines"                      "gpu_platform_id"              
[111] "gpu_device_id"                 "gpu_use_dp"                   
[113] "num_gpu"                       "start_iteration"              
[115] "num_iteration"                 "pred_early_stop"              
[117] "pred_early_stop_freq"          "pred_early_stop_margin"       
[119] "output_result"                
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.lssvm")
> ### * mlr_learners_classif.lssvm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.lssvm
> ### Title: Classification Least Squares Support Vector Machine Learner
> ### Aliases: mlr_learners_classif.lssvm LearnerClassifLSSVM
> 
> ### ** Examples
> 
> if (requireNamespace("kernlab", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.lssvm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifLSSVM:classif.lssvm>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, kernlab
* Predict Type: response
* Feature types: numeric, integer
* Properties: multiclass, twoclass
 [1] "scaled"     "kernel"     "sigma"      "degree"     "scale"     
 [6] "offset"     "order"      "length"     "lambda"     "normalized"
[11] "kpar"       "tau"        "reduced"    "rank"       "delta"     
[16] "tol"        "fit"        "na.action"  "coupler"   
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.mob")
> ### * mlr_learners_classif.mob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.mob
> ### Title: Classification Model-based Recursive Partitioning Learner
> ### Aliases: mlr_learners_classif.mob LearnerClassifMob
> 
> ### ** Examples
> 
> if (requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.mob")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifMob:classif.mob>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, partykit, sandwich, coin
* Predict Type: response
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: multiclass, twoclass, weights
 [1] "rhs"         "fit"         "offset"      "cluster"     "alpha"      
 [6] "bonferroni"  "minsize"     "minsplit"    "minbucket"   "maxdepth"   
[11] "mtry"        "trim"        "breakties"   "parm"        "dfsplit"    
[16] "prune"       "restart"     "verbose"     "caseweights" "ytype"      
[21] "xtype"       "terminal"    "inner"       "model"       "numsplit"   
[26] "catsplit"    "vcov"        "ordinal"     "nrep"        "applyfun"   
[31] "cores"       "additional"  "predict_fun"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.randomForest")
> ### * mlr_learners_classif.randomForest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.randomForest
> ### Title: Classification Random Forest Learner
> ### Aliases: mlr_learners_classif.randomForest LearnerClassifRandomForest
> 
> ### ** Examples
> 
> if (requireNamespace("randomForest", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.randomForest")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifRandomForest:classif.randomForest>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, randomForest
* Predict Type: response
* Feature types: numeric, factor, ordered
* Properties: importance, multiclass, oob_error, twoclass, weights
 [1] "ntree"       "mtry"        "replace"     "classwt"     "cutoff"     
 [6] "strata"      "sampsize"    "nodesize"    "maxnodes"    "importance" 
[11] "localImp"    "proximity"   "oob.prox"    "norm.votes"  "do.trace"   
[16] "keep.forest" "keep.inbag"  "predict.all" "nodes"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_classif.rfsrc")
> ### * mlr_learners_classif.rfsrc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_classif.rfsrc
> ### Title: Classification Random Forest SRC Learner
> ### Aliases: mlr_learners_classif.rfsrc LearnerClassifRandomForestSRC
> 
> ### ** Examples
> 
> if (requireNamespace("randomForestSRC", quietly = TRUE)) {
+   learner = mlr3::lrn("classif.rfsrc")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerClassifRandomForestSRC:classif.rfsrc>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, randomForestSRC
* Predict Type: response
* Feature types: logical, integer, numeric, factor
* Properties: importance, missings, multiclass, oob_error, twoclass,
  weights
 [1] "ntree"          "mtry"           "mtry.ratio"     "nodesize"      
 [5] "nodedepth"      "splitrule"      "nsplit"         "importance"    
 [9] "block.size"     "bootstrap"      "samptype"       "samp"          
[13] "membership"     "sampsize"       "sampsize.ratio" "na.action"     
[17] "nimpute"        "ntime"          "cause"          "proximity"     
[21] "distance"       "forest.wt"      "xvar.wt"        "split.wt"      
[25] "forest"         "var.used"       "split.depth"    "seed"          
[29] "do.trace"       "statistics"     "get.tree"       "outcome"       
[33] "ptn.count"      "cores"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.kde_kd")
> ### * mlr_learners_dens.kde_kd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.kde_kd
> ### Title: Density Kerdiest Kernel Learner
> ### Aliases: mlr_learners_dens.kde_kd LearnerDensKDEkd
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("kerdiest", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.kde_kd")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensKDEkd:dens.kde_kd>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, kerdiest
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: -
[1] "bw"          "type_kernel"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.kde_ks")
> ### * mlr_learners_dens.kde_ks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.kde_ks
> ### Title: Density KS Kernel Learner
> ### Aliases: mlr_learners_dens.kde_ks LearnerDensKDEks
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("ks", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.kde_ks")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensKDEks:dens.kde_ks>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, ks
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: -
 [1] "h"             "H"             "gridsize"      "gridtype"     
 [5] "xmin"          "xmax"          "supp"          "binned"       
 [9] "bgridsize"     "positive"      "adj.positive"  "w"            
[13] "compute.cont"  "approx.cont"   "unit.interval" "verbose"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.locfit")
> ### * mlr_learners_dens.locfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.locfit
> ### Title: Density Locfit Learner
> ### Aliases: mlr_learners_dens.locfit LearnerDensLocfit
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("locfit", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.locfit")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensLocfit:dens.locfit>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, locfit
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: -
 [1] "window" "width"  "from"   "to"     "cut"    "deg"    "link"   "kern"  
 [9] "kt"     "renorm" "maxk"   "itype"  "mint"   "maxit" 
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.logspline")
> ### * mlr_learners_dens.logspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.logspline
> ### Title: Density Logspline Learner
> ### Aliases: mlr_learners_dens.logspline LearnerDensLogspline
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("logspline", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.logspline")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensLogspline:dens.logspline>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, logspline
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: -
[1] "lbound"       "ubound"       "maxknots"     "knots"        "nknots"      
[6] "penalty"      "silent"       "mind"         "error.action"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.mixed")
> ### * mlr_learners_dens.mixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.mixed
> ### Title: Density Mixed Data Kernel Learner
> ### Aliases: mlr_learners_dens.mixed LearnerDensMixed
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("np", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.mixed")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensMixed:dens.mixed>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, np
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: -
 [1] "bws"               "ckertype"          "bwscaling"        
 [4] "bwmethod"          "bwtype"            "bandwidth.compute"
 [7] "ckerorder"         "remin"             "itmax"            
[10] "nmulti"            "ftol"              "tol"              
[13] "small"             "lbc.dir"           "dfc.dir"          
[16] "cfac.dir"          "initc.dir"         "lbd.dir"          
[19] "hbd.dir"           "dfac.dir"          "initd.dir"        
[22] "lbc.init"          "hbc.init"          "cfac.init"        
[25] "lbd.init"          "hbd.init"          "dfac.init"        
[28] "ukertype"          "okertype"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.nonpar")
> ### * mlr_learners_dens.nonpar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.nonpar
> ### Title: Density Nonparametric Learner
> ### Aliases: mlr_learners_dens.nonpar LearnerDensNonparametric
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("sm", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.nonpar")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensNonparametric:dens.nonpar>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, sm
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: weights
[1] "h"         "group"     "delta"     "h.weights" "hmult"     "method"   
[7] "positive"  "verbose"  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.pen")
> ### * mlr_learners_dens.pen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.pen
> ### Title: Density Penalized Learner
> ### Aliases: mlr_learners_dens.pen LearnerDensPenalized
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("pendensity", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.pen")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensPenalized:dens.pen>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, pendensity
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: -
[1] "base"        "no.base"     "max.iter"    "lambda0"     "q"          
[6] "sort"        "with.border" "m"           "eps"        
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.plug")
> ### * mlr_learners_dens.plug
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.plug
> ### Title: Density Plug-In Kernel Learner
> ### Aliases: mlr_learners_dens.plug LearnerDensPlugin
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("plugdensity", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.plug")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensPlugin:dens.plug>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, plugdensity
* Predict Type: pdf
* Feature types: numeric
* Properties: missings
[1] "na.rm"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_dens.spline")
> ### * mlr_learners_dens.spline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_dens.spline
> ### Title: Density Smoothing Splines Learner
> ### Aliases: mlr_learners_dens.spline LearnerDensSpline
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("gss", quietly = TRUE)) {
+   learner = mlr3::lrn("dens.spline")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerDensSpline:dens.spline>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, gss
* Predict Type: pdf
* Feature types: integer, numeric
* Properties: missings
 [1] "type"       "alpha"      "weights"    "na.action"  "id.basis"  
 [6] "nbasis"     "seed"       "domain"     "quad"       "qdsz.depth"
[11] "bias"       "prec"       "maxiter"    "skip.iter" 
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.IBk")
> ### * mlr_learners_regr.IBk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.IBk
> ### Title: Regression IBk Learner
> ### Aliases: mlr_learners_regr.IBk LearnerRegrIBk
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.IBk")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrIBk:regr.IBk>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: -
 [1] "subset"                    "na.action"                
 [3] "I"                         "F"                        
 [5] "K"                         "E"                        
 [7] "W"                         "X"                        
 [9] "A"                         "output_debug_info"        
[11] "do_not_check_capabilities" "num_decimal_places"       
[13] "batch_size"                "options"                  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.M5Rules")
> ### * mlr_learners_regr.M5Rules
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.M5Rules
> ### Title: Regression M5Rules Learner
> ### Aliases: mlr_learners_regr.M5Rules LearnerRegrM5Rules
> 
> ### ** Examples
> 
> if (requireNamespace("RWeka", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.M5Rules")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrM5Rules:regr.M5Rules>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, RWeka
* Predict Type: response
* Feature types: numeric, factor, ordered, integer
* Properties: -
 [1] "subset"                    "na.action"                
 [3] "N"                         "U"                        
 [5] "R"                         "M"                        
 [7] "output_debug_info"         "do_not_check_capabilities"
 [9] "num_decimal_places"        "batch_size"               
[11] "options"                  
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.bart")
> ### * mlr_learners_regr.bart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.bart
> ### Title: Regression BART (Bayesian Additive Regression Trees) Learner
> ### Aliases: mlr_learners_regr.bart LearnerRegrBart
> 
> ### ** Examples
> 
> if (requireNamespace("dbarts", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.bart")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrBart:regr.bart>
* Model: -
* Parameters: keeptrees=TRUE
* Packages: mlr3, mlr3extralearners, dbarts
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: weights
 [1] "ntree"         "sigest"        "sigdf"         "sigquant"     
 [5] "k"             "power"         "base"          "ndpost"       
 [9] "nskip"         "printevery"    "keepevery"     "keeptrainfits"
[13] "usequants"     "numcut"        "printcutoffs"  "verbose"      
[17] "keeptrees"     "keepcall"      "sampleronly"   "seed"         
[21] "proposalprobs"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.catboost")
> ### * mlr_learners_regr.catboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.catboost
> ### Title: Gradient Boosted Decision Trees Regression Learner
> ### Aliases: mlr_learners_regr.catboost LearnerRegrCatboost
> 
> ### ** Examples
> 
> if (requireNamespace("catboost", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.catboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrCatboost:regr.catboost>
* Model: -
* Parameters: loss_function=RMSE, logging_level=Silent, thread_count=1,
  allow_writing_files=FALSE, save_snapshot=FALSE
* Packages: mlr3, mlr3extralearners, catboost
* Predict Type: response
* Feature types: numeric, factor, ordered
* Properties: importance, missings, weights
 [1] "loss_function"                  "iterations"                    
 [3] "learning_rate"                  "random_seed"                   
 [5] "l2_leaf_reg"                    "bootstrap_type"                
 [7] "bagging_temperature"            "subsample"                     
 [9] "sampling_frequency"             "sampling_unit"                 
[11] "mvs_reg"                        "random_strength"               
[13] "depth"                          "grow_policy"                   
[15] "min_data_in_leaf"               "max_leaves"                    
[17] "has_time"                       "rsm"                           
[19] "nan_mode"                       "fold_permutation_block"        
[21] "leaf_estimation_method"         "leaf_estimation_iterations"    
[23] "leaf_estimation_backtracking"   "fold_len_multiplier"           
[25] "approx_on_full_history"         "boosting_type"                 
[27] "boost_from_average"             "langevin"                      
[29] "diffusion_temperature"          "score_function"                
[31] "monotone_constraints"           "feature_weights"               
[33] "first_feature_use_penalties"    "penalties_coefficient"         
[35] "per_object_feature_penalties"   "model_shrink_rate"             
[37] "model_shrink_mode"              "target_border"                 
[39] "border_count"                   "feature_border_type"           
[41] "per_float_feature_quantization" "thread_count"                  
[43] "task_type"                      "devices"                       
[45] "logging_level"                  "metric_period"                 
[47] "train_dir"                      "model_size_reg"                
[49] "allow_writing_files"            "save_snapshot"                 
[51] "snapshot_file"                  "snapshot_interval"             
[53] "simple_ctr"                     "combinations_ctr"              
[55] "ctr_target_border_count"        "counter_calc_method"           
[57] "max_ctr_complexity"             "ctr_leaf_count_limit"          
[59] "store_all_simple_ctr"           "final_ctr_computation_mode"    
[61] "verbose"                        "ntree_start"                   
[63] "ntree_end"                     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.cforest")
> ### * mlr_learners_regr.cforest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.cforest
> ### Title: Regression Conditional Random Forest Learner
> ### Aliases: mlr_learners_regr.cforest LearnerRegrCForest
> 
> ### ** Examples
> 
> if (requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.cforest")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrCForest:regr.cforest>
* Model: -
* Parameters: teststat=quadratic, testtype=Univariate, mincriterion=0,
  saveinfo=FALSE
* Packages: mlr3, mlr3extralearners, partykit, sandwich, coin
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: oob_error, weights
 [1] "ntree"           "replace"         "fraction"        "mtry"           
 [5] "mtryratio"       "applyfun"        "cores"           "trace"          
 [9] "offset"          "cluster"         "scores"          "teststat"       
[13] "splitstat"       "splittest"       "testtype"        "nmax"           
[17] "pargs"           "alpha"           "mincriterion"    "logmincriterion"
[21] "minsplit"        "minbucket"       "minprob"         "stump"          
[25] "lookahead"       "MIA"             "maxvar"          "nresample"      
[29] "tol"             "maxsurrogate"    "numsurrogate"    "maxdepth"       
[33] "multiway"        "splittry"        "intersplit"      "majority"       
[37] "caseweights"     "saveinfo"        "update"          "splitflavour"   
[41] "OOB"             "simplify"        "scale"           "nperm"          
[45] "risk"            "conditional"     "threshold"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.ctree")
> ### * mlr_learners_regr.ctree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.ctree
> ### Title: Regression Conditional Inference Tree Learner
> ### Aliases: mlr_learners_regr.ctree LearnerRegrCTree
> 
> ### ** Examples
> 
> if (requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.ctree")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrCTree:regr.ctree>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, partykit, sandwich, coin
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: weights
 [1] "teststat"        "splitstat"       "splittest"       "testtype"       
 [5] "nmax"            "alpha"           "mincriterion"    "logmincriterion"
 [9] "minsplit"        "minbucket"       "minprob"         "stump"          
[13] "lookahead"       "MIA"             "maxvar"          "nresample"      
[17] "tol"             "maxsurrogate"    "numsurrogate"    "mtry"           
[21] "maxdepth"        "multiway"        "splittry"        "intersplit"     
[25] "majority"        "caseweights"     "applyfun"        "cores"          
[29] "saveinfo"        "update"          "splitflavour"    "offset"         
[33] "cluster"         "scores"          "doFit"           "maxpts"         
[37] "abseps"          "releps"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.cubist")
> ### * mlr_learners_regr.cubist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.cubist
> ### Title: Regression Cubist Learner
> ### Aliases: mlr_learners_regr.cubist LearnerRegrCubist
> 
> ### ** Examples
> 
> if (requireNamespace("Cubist", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.cubist")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrCubist:regr.cubist>
* Model: -
* Parameters: committees=1, neighbors=0
* Packages: mlr3, mlr3extralearners, Cubist
* Predict Type: response
* Feature types: integer, numeric, character, factor, ordered
* Properties: -
[1] "committees"    "unbiased"      "rules"         "extrapolation"
[5] "sample"        "seed"          "label"         "neighbors"    
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.earth")
> ### * mlr_learners_regr.earth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.earth
> ### Title: Regression MARS (Multivariate Adaptive Regression Splines)
> ###   Learner
> ### Aliases: mlr_learners_regr.earth LearnerRegrEarth
> 
> ### ** Examples
> 
> if (requireNamespace("earth", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.earth")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrEarth:regr.earth>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, earth
* Predict Type: response
* Feature types: numeric, factor, integer
* Properties: weights
 [1] "wp"              "offset"          "keepxy"          "trace"          
 [5] "degree"          "penalty"         "nk"              "thresh"         
 [9] "minspan"         "endspan"         "newvar.penalty"  "fast.k"         
[13] "fast.beta"       "linpreds"        "allowed"         "pmethod"        
[17] "nprune"          "nfold"           "ncross"          "stratify"       
[21] "varmod.method"   "varmod.exponent" "varmod.conv"     "varmod.clamp"   
[25] "varmod.minspan"  "Scale.y"         "Adjust.endspan"  "Auto.linpreds"  
[29] "Force.weights"   "Use.beta.cache"  "Force.xtx.prune" "Get.leverages"  
[33] "Exhaustive.tol" 
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.extratrees")
> ### * mlr_learners_regr.extratrees
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.extratrees
> ### Title: Regression ExtraTrees Learner
> ### Aliases: mlr_learners_regr.extratrees LearnerRegrExtraTrees
> 
> ### ** Examples
> 
> if (requireNamespace("extraTrees", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.extratrees")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrExtraTrees:regr.extratrees>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, extraTrees
* Predict Type: response
* Feature types: integer, numeric
* Properties: weights
 [1] "ntree"             "mtry"              "nodesize"         
 [4] "numRandomCuts"     "evenCuts"          "numThreads"       
 [7] "quantile"          "subsetSizes"       "subsetGroups"     
[10] "tasks"             "probOfTaskCuts"    "numRandomTaskCuts"
[13] "na.action"        
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.fnn")
> ### * mlr_learners_regr.fnn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.fnn
> ### Title: Regression Fast Nearest Neighbor Search Learner
> ### Aliases: mlr_learners_regr.fnn LearnerRegrFNN
> 
> ### ** Examples
> 
> if (requireNamespace("FNN", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.fnn")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrFNN:regr.fnn>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, FNN
* Predict Type: response
* Feature types: integer, numeric
* Properties: -
[1] "k"         "algorithm"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.gam")
> ### * mlr_learners_regr.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.gam
> ### Title: Regression Generalized Additive Model Learner
> ### Aliases: mlr_learners_regr.gam LearnerRegrGam
> 
> ### ** Examples
> 
> 
> # simple example
> t = mlr3::tsk("mtcars")
> l = mlr3::lrn("regr.gam")
> l$param_set$values$formula = mpg ~ cyl + am + s(disp) + s(hp)
> l$train(t)
> l$model

Family: gaussian 
Link function: identity 

Formula:
mpg ~ cyl + am + s(disp) + s(hp)

Estimated degrees of freedom:
6.86 1.00  total = 10.86 

GCV score: 4.851986     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.gamboost")
> ### * mlr_learners_regr.gamboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.gamboost
> ### Title: Boosted Generalized Additive Regression Learner
> ### Aliases: mlr_learners_regr.gamboost LearnerRegrGAMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mboost", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.gamboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrGAMBoost:regr.gamboost>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, mboost
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: weights
 [1] "baselearner"   "dfbase"        "offset"        "family"       
 [5] "custom.family" "nuirange"      "d"             "mstop"        
 [9] "nu"            "risk"          "oobweights"    "trace"        
[13] "stopintern"    "na.action"    
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.gausspr")
> ### * mlr_learners_regr.gausspr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.gausspr
> ### Title: Regression Gaussian Process Learner
> ### Aliases: mlr_learners_regr.gausspr LearnerRegrGausspr
> 
> ### ** Examples
> 
> if (requireNamespace("kernlab", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.gausspr")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrGausspr:regr.gausspr>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, kernlab
* Predict Type: response
* Feature types: numeric, integer, logical, character, factor, ordered
* Properties: -
 [1] "scaled"         "kernel"         "sigma"          "degree"        
 [5] "scale"          "offset"         "order"          "kpar"          
 [9] "var"            "variance.model" "tol"            "fit"           
[13] "na.action"     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.gbm")
> ### * mlr_learners_regr.gbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.gbm
> ### Title: Regression Gradient Boosting Machine Learner
> ### Aliases: mlr_learners_regr.gbm LearnerRegrGBM
> 
> ### ** Examples
> 
> if (requireNamespace("gbm", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.gbm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrGBM:regr.gbm>
* Model: -
* Parameters: keep.data=FALSE, n.cores=1
* Packages: mlr3, mlr3extralearners, gbm
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: importance, missings, weights
 [1] "distribution"      "n.trees"           "interaction.depth"
 [4] "n.minobsinnode"    "shrinkage"         "bag.fraction"     
 [7] "train.fraction"    "cv.folds"          "keep.data"        
[10] "verbose"           "n.cores"           "var.monotone"     
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.glm")
> ### * mlr_learners_regr.glm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.glm
> ### Title: Regression Generalized Linear Model Regression Learner
> ### Aliases: mlr_learners_regr.glm LearnerRegrGlm
> 
> ### ** Examples
> 
> if (requireNamespace("stats", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.glm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrGlm:regr.glm>
* Model: -
* Parameters: family=gaussian, type=response
* Packages: mlr3, mlr3extralearners, stats
* Predict Type: response
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: weights
 [1] "singular.ok" "x"           "y"           "model"       "etastart"   
 [6] "mustart"     "start"       "offset"      "family"      "na.action"  
[11] "link"        "epsilon"     "maxit"       "trace"       "dispersion" 
[16] "type"       
> if (requireNamespace("stats", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.glm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrGlm:regr.glm>
* Model: -
* Parameters: family=gaussian, type=response
* Packages: mlr3, mlr3extralearners, stats
* Predict Type: response
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: weights
 [1] "singular.ok" "x"           "y"           "model"       "etastart"   
 [6] "mustart"     "start"       "offset"      "family"      "na.action"  
[11] "link"        "epsilon"     "maxit"       "trace"       "dispersion" 
[16] "type"       
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.glmboost")
> ### * mlr_learners_regr.glmboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.glmboost
> ### Title: Boosted Generalized Linear Regression Learner
> ### Aliases: mlr_learners_regr.glmboost LearnerRegrGLMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mboost", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.glmboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrGLMBoost:regr.glmboost>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, mboost
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: weights
 [1] "offset"        "family"        "custom.family" "nuirange"     
 [5] "d"             "center"        "mstop"         "nu"           
 [9] "risk"          "oobweights"    "trace"         "stopintern"   
[13] "na.action"     "contrasts.arg"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.ksvm")
> ### * mlr_learners_regr.ksvm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.ksvm
> ### Title: Regression Kernlab Support Vector Machine
> ### Aliases: mlr_learners_regr.ksvm LearnerRegrKSVM
> 
> ### ** Examples
> 
> if (requireNamespace("kernlab", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.ksvm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrKSVM:regr.ksvm>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, kernlab
* Predict Type: response
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: weights
 [1] "scaled"    "type"      "kernel"    "C"         "nu"        "epsilon"  
 [7] "cache"     "tol"       "shrinking" "sigma"     "degree"    "scale"    
[13] "order"     "offset"    "na.action" "fit"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.liblinear")
> ### * mlr_learners_regr.liblinear
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.liblinear
> ### Title: L2-Regularized Support Vector Regression Learner
> ### Aliases: mlr_learners_regr.liblinear LearnerRegrLiblineaR
> 
> ### ** Examples
> 
> if (requireNamespace("LiblineaR", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.liblinear")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrLiblineaR:regr.liblinear>
* Model: -
* Parameters: svr_eps=0.001
* Packages: mlr3, mlr3extralearners, LiblineaR
* Predict Type: response
* Feature types: integer, numeric
* Properties: -
[1] "type"     "cost"     "bias"     "svr_eps"  "cross"    "verbose"  "findC"   
[8] "useInitC"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.lightgbm")
> ### * mlr_learners_regr.lightgbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.lightgbm
> ### Title: Regression Light GBM Learner
> ### Aliases: mlr_learners_regr.lightgbm LearnerRegrLightGBM
> 
> ### ** Examples
> 
> if (requireNamespace("lightgbm", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.lightgbm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrLightGBM:regr.lightgbm>
* Model: -
* Parameters: num_threads=1, verbose=-1, objective=regression
* Packages: mlr3, mlr3extralearners, lightgbm
* Predict Type: response
* Feature types: numeric, integer
* Properties: importance, missings, weights
  [1] "nrounds"                       "objective"                    
  [3] "metric"                        "custom_eval"                  
  [5] "verbose"                       "record"                       
  [7] "eval_freq"                     "init_model"                   
  [9] "early_stopping_rounds"         "early_stopping_split"         
 [11] "callbacks"                     "reset_data"                   
 [13] "categorical_feature"           "boosting"                     
 [15] "linear_tree"                   "num_iterations"               
 [17] "learning_rate"                 "num_leaves"                   
 [19] "tree_learner"                  "num_threads"                  
 [21] "device_type"                   "seed"                         
 [23] "deterministic"                 "force_col_wise"               
 [25] "force_row_wise"                "histogram_pool_size"          
 [27] "max_depth"                     "min_data_in_leaf"             
 [29] "min_sum_hessian_in_leaf"       "bagging_fraction"             
 [31] "bagging_freq"                  "bagging_seed"                 
 [33] "feature_fraction"              "feature_fraction_bynode"      
 [35] "feature_fraction_seed"         "extra_trees"                  
 [37] "extra_seed"                    "first_metric_only"            
 [39] "max_delta_step"                "lambda_l1"                    
 [41] "lambda_l2"                     "linear_lambda"                
 [43] "min_gain_to_split"             "drop_rate"                    
 [45] "max_drop"                      "skip_drop"                    
 [47] "xgboost_dart_mode"             "uniform_drop"                 
 [49] "drop_seed"                     "top_rate"                     
 [51] "other_rate"                    "min_data_per_group"           
 [53] "max_cat_threshold"             "cat_l2"                       
 [55] "cat_smooth"                    "max_cat_to_onehot"            
 [57] "top_k"                         "monotone_constraints"         
 [59] "monotone_constraints_method"   "monotone_penalty"             
 [61] "feature_contri"                "forcedsplits_filename"        
 [63] "refit_decay_rate"              "cegb_tradeoff"                
 [65] "cegb_penalty_split"            "cegb_penalty_feature_lazy"    
 [67] "cegb_penalty_feature_coupled"  "path_smooth"                  
 [69] "interaction_constraints"       "input_model"                  
 [71] "output_model"                  "saved_feature_importance_type"
 [73] "snapshot_freq"                 "max_bin"                      
 [75] "max_bin_by_feature"            "min_data_in_bin"              
 [77] "bin_construct_sample_cnt"      "data_random_seed"             
 [79] "is_enable_sparse"              "enable_bundle"                
 [81] "use_missing"                   "zero_as_missing"              
 [83] "feature_pre_filter"            "pre_partition"                
 [85] "two_round"                     "header"                       
 [87] "group_column"                  "forcedbins_filename"          
 [89] "save_binary"                   "boost_from_average"           
 [91] "reg_sqrt"                      "alpha"                        
 [93] "fair_c"                        "poisson_max_delta_step"       
 [95] "tweedie_variance_power"        "metric_freq"                  
 [97] "is_provide_training_metric"    "num_machines"                 
 [99] "local_listen_port"             "time_out"                     
[101] "machine_list_filename"         "machines"                     
[103] "gpu_platform_id"               "gpu_device_id"                
[105] "gpu_use_dp"                    "num_gpu"                      
[107] "start_iteration"               "num_iteration"                
[109] "pred_early_stop"               "pred_early_stop_freq"         
[111] "pred_early_stop_margin"        "output_result"                
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.mars")
> ### * mlr_learners_regr.mars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.mars
> ### Title: Regression Mars Learner
> ### Aliases: mlr_learners_regr.mars LearnerRegrMars
> 
> ### ** Examples
> 
> if (requireNamespace("mda", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.mars")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrMars:regr.mars>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, mda
* Predict Type: response
* Feature types: integer, numeric
* Properties: -
[1] "degree"       "nk"           "penalty"      "thresh"       "prune"       
[6] "trace.mars"   "forward.step"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.mob")
> ### * mlr_learners_regr.mob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.mob
> ### Title: Regression Model-based Recursive Partitioning Learner
> ### Aliases: mlr_learners_regr.mob LearnerRegrMob
> 
> ### ** Examples
> 
> if (requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.mob")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrMob:regr.mob>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, partykit, sandwich, coin
* Predict Type: response
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: weights
 [1] "rhs"         "fit"         "offset"      "cluster"     "alpha"      
 [6] "bonferroni"  "minsize"     "minsplit"    "minbucket"   "maxdepth"   
[11] "mtry"        "trim"        "breakties"   "parm"        "dfsplit"    
[16] "prune"       "restart"     "verbose"     "caseweights" "ytype"      
[21] "xtype"       "terminal"    "inner"       "model"       "numsplit"   
[26] "catsplit"    "vcov"        "ordinal"     "nrep"        "applyfun"   
[31] "cores"       "additional"  "predict_fun"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.randomForest")
> ### * mlr_learners_regr.randomForest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.randomForest
> ### Title: Regression Random Forest Learner
> ### Aliases: mlr_learners_regr.randomForest LearnerRegrRandomForest
> 
> ### ** Examples
> 
> if (requireNamespace("randomForest", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.randomForest")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrRandomForest:regr.randomForest>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, randomForest
* Predict Type: response
* Feature types: integer, numeric, factor, ordered
* Properties: importance, oob_error, weights
 [1] "ntree"       "mtry"        "replace"     "strata"      "sampsize"   
 [6] "nodesize"    "maxnodes"    "importance"  "localImp"    "proximity"  
[11] "oob.prox"    "norm.votes"  "do.trace"    "keep.forest" "keep.inbag" 
[16] "predict.all" "nodes"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.rfsrc")
> ### * mlr_learners_regr.rfsrc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.rfsrc
> ### Title: Regression Random Forest SRC Learner
> ### Aliases: mlr_learners_regr.rfsrc LearnerRegrRandomForestSRC
> 
> ### ** Examples
> 
> if (requireNamespace("randomForestSRC", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.rfsrc")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrRandomForestSRC:regr.rfsrc>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, randomForestSRC
* Predict Type: response
* Feature types: logical, integer, numeric, factor
* Properties: importance, missings, oob_error, weights
 [1] "ntree"          "mtry"           "mtry.ratio"     "nodesize"      
 [5] "nodedepth"      "splitrule"      "nsplit"         "importance"    
 [9] "block.size"     "bootstrap"      "samptype"       "samp"          
[13] "membership"     "sampsize"       "sampsize.ratio" "na.action"     
[17] "nimpute"        "ntime"          "cause"          "proximity"     
[21] "distance"       "forest.wt"      "xvar.wt"        "split.wt"      
[25] "forest"         "var.used"       "split.depth"    "seed"          
[29] "do.trace"       "statistics"     "get.tree"       "outcome"       
[33] "ptn.count"      "cores"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_regr.rvm")
> ### * mlr_learners_regr.rvm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_regr.rvm
> ### Title: Regression Relevance Vector Machine Learner
> ### Aliases: mlr_learners_regr.rvm LearnerRegrRVM
> 
> ### ** Examples
> 
> if (requireNamespace("kernlab", quietly = TRUE)) {
+   learner = mlr3::lrn("regr.rvm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerRegrRVM:regr.rvm>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3extralearners, kernlab
* Predict Type: response
* Feature types: numeric, integer, logical, character, factor, ordered
* Properties: -
 [1] "kernel"     "sigma"      "degree"     "scale"      "offset"    
 [6] "order"      "length"     "lambda"     "normalized" "kpar"      
[11] "alpha"      "var"        "var.fix"    "iterations" "tol"       
[16] "minmaxdiff" "verbosity"  "fit"        "na.action" 
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.akritas")
> ### * mlr_learners_surv.akritas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.akritas
> ### Title: Survival Akritas Estimator Learner
> ### Aliases: mlr_learners_surv.akritas LearnerSurvAkritas
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.akritas")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvAkritas:surv.akritas>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, distr6
* Predict Type: crank
* Feature types: logical, integer, character, numeric, factor
* Properties: -
[1] "lambda"  "reverse"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.blackboost")
> ### * mlr_learners_surv.blackboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.blackboost
> ### Title: Gradient Boosting with Regression Trees Survival Learner
> ### Aliases: mlr_learners_surv.blackboost LearnerSurvBlackBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("mboost", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.blackboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvBlackBoost:surv.blackboost>
* Model: -
* Parameters: family=coxph
* Packages: mlr3, mlr3proba, mlr3extralearners, mboost, pracma
* Predict Type: distr
* Feature types: integer, numeric, factor
* Properties: weights
 [1] "family"          "custom.family"   "nuirange"        "offset"         
 [5] "center"          "mstop"           "nu"              "risk"           
 [9] "stopintern"      "trace"           "oobweights"      "teststat"       
[13] "splitstat"       "splittest"       "testtype"        "maxpts"         
[17] "abseps"          "releps"          "nmax"            "alpha"          
[21] "mincriterion"    "logmincriterion" "minsplit"        "minbucket"      
[25] "minprob"         "stump"           "lookahead"       "MIA"            
[29] "nresample"       "tol"             "maxsurrogate"    "mtry"           
[33] "maxdepth"        "multiway"        "splittry"        "intersplit"     
[37] "majority"        "caseweights"     "sigma"           "ipcw"           
[41] "na.action"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.cforest")
> ### * mlr_learners_surv.cforest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.cforest
> ### Title: Survival Conditional Random Forest Learner
> ### Aliases: mlr_learners_surv.cforest LearnerSurvCForest
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("partykit", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE) && requireNamespace("coin", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.cforest")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvCForest:surv.cforest>
* Model: -
* Parameters: teststat=quadratic, testtype=Univariate, mincriterion=0,
  saveinfo=FALSE
* Packages: mlr3, mlr3proba, mlr3extralearners, partykit, sandwich,
  coin
* Predict Type: distr
* Feature types: integer, numeric, factor, ordered
* Properties: weights
 [1] "ntree"           "replace"         "fraction"        "mtry"           
 [5] "mtryratio"       "applyfun"        "cores"           "trace"          
 [9] "offset"          "cluster"         "na.action"       "scores"         
[13] "teststat"        "splitstat"       "splittest"       "testtype"       
[17] "nmax"            "alpha"           "mincriterion"    "logmincriterion"
[21] "minsplit"        "minbucket"       "minprob"         "stump"          
[25] "lookahead"       "MIA"             "nresample"       "tol"            
[29] "maxsurrogate"    "numsurrogate"    "maxdepth"        "multiway"       
[33] "splittry"        "intersplit"      "majority"        "caseweights"    
[37] "saveinfo"        "update"          "splitflavour"    "maxvar"         
[41] "OOB"             "simplify"        "scale"           "maxpts"         
[45] "abseps"          "releps"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.coxboost")
> ### * mlr_learners_surv.coxboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.coxboost
> ### Title: Survival Cox Model with Likelihood Based Boosting Learner
> ### Aliases: mlr_learners_surv.coxboost LearnerSurvCoxboost
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("CoxBoost", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.coxboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvCoxboost:surv.coxboost>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, CoxBoost, pracma
* Predict Type: distr
* Feature types: integer, numeric
* Properties: weights
 [1] "unpen.index"     "standardize"     "stepno"          "penalty"        
 [5] "criterion"       "stepsize.factor" "sf.scheme"       "pendistmat"     
 [9] "connected.index" "x.is.01"         "return.score"    "trace"          
[13] "at.step"        
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.coxtime")
> ### * mlr_learners_surv.coxtime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.coxtime
> ### Title: Survival Cox-Time Learner
> ### Aliases: mlr_learners_surv.coxtime LearnerSurvCoxtime
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE) && requireNamespace("reticulate", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.coxtime")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvCoxtime:surv.coxtime>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, distr6,
  reticulate
* Predict Type: crank
* Feature types: integer, numeric
* Properties: -
 [1] "frac"             "standardize_time" "log_duration"     "with_mean"       
 [5] "with_std"         "num_nodes"        "batch_norm"       "dropout"         
 [9] "activation"       "device"           "shrink"           "optimizer"       
[13] "rho"              "eps"              "lr"               "weight_decay"    
[17] "learning_rate"    "lr_decay"         "betas"            "amsgrad"         
[21] "lambd"            "alpha"            "t0"               "momentum"        
[25] "centered"         "etas"             "step_sizes"       "dampening"       
[29] "nesterov"         "batch_size"       "epochs"           "verbose"         
[33] "num_workers"      "shuffle"          "best_weights"     "early_stopping"  
[37] "min_delta"        "patience"        
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.ctree")
> ### * mlr_learners_surv.ctree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.ctree
> ### Title: Survival Conditional Inference Tree Learner
> ### Aliases: mlr_learners_surv.ctree LearnerSurvCTree
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("partykit", quietly = TRUE) && requireNamespace("coin", quietly = TRUE) && requireNamespace("sandwich", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.ctree")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvCTree:surv.ctree>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, partykit, coin,
  sandwich
* Predict Type: distr
* Feature types: integer, numeric, factor, ordered
* Properties: weights
 [1] "teststat"        "splitstat"       "splittest"       "testtype"       
 [5] "nmax"            "alpha"           "mincriterion"    "logmincriterion"
 [9] "minsplit"        "minbucket"       "minprob"         "stump"          
[13] "lookahead"       "MIA"             "nresample"       "tol"            
[17] "maxsurrogate"    "numsurrogate"    "mtry"            "maxdepth"       
[21] "maxvar"          "multiway"        "splittry"        "intersplit"     
[25] "majority"        "caseweights"     "applyfun"        "cores"          
[29] "saveinfo"        "update"          "splitflavour"    "offset"         
[33] "cluster"         "scores"          "doFit"           "maxpts"         
[37] "abseps"          "releps"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.cv_coxboost")
> ### * mlr_learners_surv.cv_coxboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.cv_coxboost
> ### Title: Survival Cox Model with Cross-Validation Likelihood Based
> ###   Boosting Learner
> ### Aliases: mlr_learners_surv.cv_coxboost LearnerSurvCVCoxboost
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("CoxBoost", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.cv_coxboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvCVCoxboost:surv.cv_coxboost>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, CoxBoost, pracma
* Predict Type: distr
* Feature types: integer, numeric
* Properties: weights
 [1] "maxstepno"       "K"               "type"            "folds"          
 [5] "minstepno"       "start.penalty"   "iter.max"        "upper.margin"   
 [9] "unpen.index"     "standardize"     "penalty"         "criterion"      
[13] "stepsize.factor" "sf.scheme"       "pendistmat"      "connected.index"
[17] "x.is.01"         "return.score"    "trace"           "at.step"        
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.deephit")
> ### * mlr_learners_surv.deephit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.deephit
> ### Title: Survival DeepHit Learner
> ### Aliases: mlr_learners_surv.deephit LearnerSurvDeephit
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE) && requireNamespace("reticulate", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.deephit")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvDeephit:surv.deephit>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, distr6,
  reticulate
* Predict Type: crank
* Feature types: integer, numeric
* Properties: -
 [1] "frac"           "cuts"           "cutpoints"      "scheme"        
 [5] "cut_min"        "num_nodes"      "batch_norm"     "dropout"       
 [9] "activation"     "custom_net"     "device"         "mod_alpha"     
[13] "sigma"          "optimizer"      "rho"            "eps"           
[17] "lr"             "weight_decay"   "learning_rate"  "lr_decay"      
[21] "betas"          "amsgrad"        "lambd"          "alpha"         
[25] "t0"             "momentum"       "centered"       "etas"          
[29] "step_sizes"     "dampening"      "nesterov"       "batch_size"    
[33] "epochs"         "verbose"        "num_workers"    "shuffle"       
[37] "best_weights"   "early_stopping" "min_delta"      "patience"      
[41] "interpolate"    "inter_scheme"   "sub"           
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.deepsurv")
> ### * mlr_learners_surv.deepsurv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.deepsurv
> ### Title: Survival DeepSurv Learner
> ### Aliases: mlr_learners_surv.deepsurv LearnerSurvDeepsurv
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE) && requireNamespace("reticulate", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.deepsurv")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvDeepsurv:surv.deepsurv>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, distr6,
  reticulate
* Predict Type: crank
* Feature types: integer, numeric
* Properties: -
 [1] "frac"           "num_nodes"      "batch_norm"     "dropout"       
 [5] "activation"     "device"         "optimizer"      "rho"           
 [9] "eps"            "lr"             "weight_decay"   "learning_rate" 
[13] "lr_decay"       "betas"          "amsgrad"        "lambd"         
[17] "alpha"          "t0"             "momentum"       "centered"      
[21] "etas"           "step_sizes"     "dampening"      "nesterov"      
[25] "batch_size"     "epochs"         "verbose"        "num_workers"   
[29] "shuffle"        "best_weights"   "early_stopping" "min_delta"     
[33] "patience"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.dnnsurv")
> ### * mlr_learners_surv.dnnsurv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.dnnsurv
> ### Title: Survival DNNSurv Learner
> ### Aliases: mlr_learners_surv.dnnsurv LearnerSurvDNNSurv
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("keras", quietly = TRUE) && requireNamespace("pseudo", quietly = TRUE) && requireNamespace("tensorflow", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.dnnsurv")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvDNNSurv:surv.dnnsurv>
* Model: -
* Parameters: verbose=0
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, keras,
  pseudo, tensorflow, distr6
* Predict Type: crank
* Feature types: integer, numeric
* Properties: -
 [1] "cuts"                 "cutpoints"            "custom_model"        
 [4] "optimizer"            "lr"                   "beta_1"              
 [7] "beta_2"               "epsilon"              "decay"               
[10] "clipnorm"             "clipvalue"            "schedule_decay"      
[13] "momentum"             "nesterov"             "loss_weights"        
[16] "weighted_metrics"     "early_stopping"       "min_delta"           
[19] "patience"             "verbose"              "baseline"            
[22] "restore_best_weights" "batch_size"           "epochs"              
[25] "validation_split"     "shuffle"              "sample_weight"       
[28] "initial_epoch"        "steps_per_epoch"      "validation_steps"    
[31] "steps"                "callbacks"           
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.flexible")
> ### * mlr_learners_surv.flexible
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.flexible
> ### Title: Survival Flexible Parametric Spline Learner
> ### Aliases: mlr_learners_surv.flexible LearnerSurvFlexible
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("flexsurv", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.flexible")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvFlexible:surv.flexible>
* Model: -
* Parameters: k=1
* Packages: mlr3, mlr3proba, mlr3extralearners, flexsurv, pracma
* Predict Type: distr
* Feature types: logical, integer, factor, numeric
* Properties: weights
 [1] "bhazard"       "k"             "knots"         "bknots"       
 [5] "scale"         "timescale"     "inits"         "rtrunc"       
 [9] "fixedpars"     "cl"            "maxiter"       "rel.tolerance"
[13] "toler.chol"    "debug"         "outer.max"    
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.gamboost")
> ### * mlr_learners_surv.gamboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.gamboost
> ### Title: Boosted Generalized Additive Survival Learner
> ### Aliases: mlr_learners_surv.gamboost LearnerSurvGAMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("mboost", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.gamboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvGAMBoost:surv.gamboost>
* Model: -
* Parameters: family=coxph
* Packages: mlr3, mlr3proba, mlr3extralearners, mboost, pracma
* Predict Type: distr
* Feature types: integer, numeric, factor, logical
* Properties: importance, selected_features, weights
 [1] "family"        "custom.family" "nuirange"      "offset"       
 [5] "center"        "mstop"         "nu"            "risk"         
 [9] "stopintern"    "trace"         "oobweights"    "baselearner"  
[13] "dfbase"        "sigma"         "ipcw"          "na.action"    
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.gbm")
> ### * mlr_learners_surv.gbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.gbm
> ### Title: Survival Gradient Boosting Machine Learner
> ### Aliases: mlr_learners_surv.gbm LearnerSurvGBM
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("gbm", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.gbm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvGBM:surv.gbm>
* Model: -
* Parameters: distribution=coxph, keep.data=FALSE, n.cores=1
* Packages: mlr3, mlr3proba, mlr3extralearners, gbm
* Predict Type: crank
* Feature types: integer, numeric, factor, ordered
* Properties: importance, missings, weights
 [1] "distribution"      "n.trees"           "cv.folds"         
 [4] "interaction.depth" "n.minobsinnode"    "shrinkage"        
 [7] "bag.fraction"      "train.fraction"    "keep.data"        
[10] "verbose"           "var.monotone"      "n.cores"          
[13] "single.tree"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.glmboost")
> ### * mlr_learners_surv.glmboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.glmboost
> ### Title: Boosted Generalized Linear Survival Learner
> ### Aliases: mlr_learners_surv.glmboost LearnerSurvGLMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("mboost", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.glmboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvGLMBoost:surv.glmboost>
* Model: -
* Parameters: family=coxph
* Packages: mlr3, mlr3proba, mlr3extralearners, mboost, pracma
* Predict Type: distr
* Feature types: integer, numeric, factor, logical
* Properties: weights
 [1] "offset"        "family"        "custom.family" "nuirange"     
 [5] "center"        "mstop"         "nu"            "risk"         
 [9] "oobweights"    "stopintern"    "trace"         "sigma"        
[13] "ipcw"          "na.action"     "contrasts.arg"
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.loghaz")
> ### * mlr_learners_surv.loghaz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.loghaz
> ### Title: Survival Logistic-Hazard Learner
> ### Aliases: mlr_learners_surv.loghaz LearnerSurvLogisticHazard
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE) && requireNamespace("reticulate", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.loghaz")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvLogisticHazard:surv.loghaz>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, distr6,
  reticulate
* Predict Type: crank
* Feature types: integer, numeric
* Properties: -
 [1] "frac"           "cuts"           "cutpoints"      "scheme"        
 [5] "cut_min"        "num_nodes"      "batch_norm"     "dropout"       
 [9] "activation"     "custom_net"     "device"         "optimizer"     
[13] "rho"            "eps"            "lr"             "weight_decay"  
[17] "learning_rate"  "lr_decay"       "betas"          "amsgrad"       
[21] "lambd"          "alpha"          "t0"             "momentum"      
[25] "centered"       "etas"           "step_sizes"     "dampening"     
[29] "nesterov"       "batch_size"     "epochs"         "verbose"       
[33] "num_workers"    "shuffle"        "best_weights"   "early_stopping"
[37] "min_delta"      "patience"       "interpolate"    "inter_scheme"  
[41] "sub"           
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.mboost")
> ### * mlr_learners_surv.mboost
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.mboost
> ### Title: Boosted Generalized Additive Survival Learner
> ### Aliases: mlr_learners_surv.mboost LearnerSurvMBoost
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("mboost", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.mboost")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvMBoost:surv.mboost>
* Model: -
* Parameters: family=coxph
* Packages: mlr3, mlr3proba, mlr3extralearners, mboost
* Predict Type: distr
* Feature types: integer, numeric, factor, logical
* Properties: importance, selected_features, weights
 [1] "family"        "custom.family" "nuirange"      "offset"       
 [5] "center"        "mstop"         "nu"            "risk"         
 [9] "stopintern"    "trace"         "oobweights"    "baselearner"  
[13] "sigma"         "ipcw"          "na.action"    
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.nelson")
> ### * mlr_learners_surv.nelson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.nelson
> ### Title: Survival Nelson-Aalen Estimator Learner
> ### Aliases: mlr_learners_surv.nelson LearnerSurvNelson
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survival", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.nelson")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvNelson:surv.nelson>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survival, pracma
* Predict Type: crank
* Feature types: logical, integer, numeric, character, factor, ordered
* Properties: missings
character(0)
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.obliqueRSF")
> ### * mlr_learners_surv.obliqueRSF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.obliqueRSF
> ### Title: Survival Oblique Random Survival Forest Learner
> ### Aliases: mlr_learners_surv.obliqueRSF LearnerSurvObliqueRSF
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("obliqueRSF", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.obliqueRSF")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvObliqueRSF:surv.obliqueRSF>
* Model: -
* Parameters: verbose=FALSE
* Packages: mlr3, mlr3proba, mlr3extralearners, obliqueRSF, pracma
* Predict Type: crank
* Feature types: integer, numeric, factor, ordered
* Properties: missings, oob_error
 [1] "alpha"                    "ntree"                   
 [3] "eval_times"               "min_events_to_split_node"
 [5] "min_obs_to_split_node"    "min_obs_in_leaf_node"    
 [7] "min_events_in_leaf_node"  "nsplit"                  
 [9] "gamma"                    "max_pval_to_split_node"  
[11] "mtry"                     "mtry_ratio"              
[13] "dfmax"                    "use.cv"                  
[15] "verbose"                  "compute_oob_predictions" 
[17] "random_seed"             
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.parametric")
> ### * mlr_learners_surv.parametric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.parametric
> ### Title: Survival Fully Parametric Learner
> ### Aliases: mlr_learners_surv.parametric LearnerSurvParametric
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survival", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.parametric")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvParametric:surv.parametric>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survival, pracma
* Predict Type: distr
* Feature types: logical, integer, numeric, factor
* Properties: weights
 [1] "type"          "na.action"     "dist"          "parms"        
 [5] "init"          "scale"         "maxiter"       "rel.tolerance"
 [9] "toler.chol"    "debug"         "outer.max"     "robust"       
[13] "score"         "cluster"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.pchazard")
> ### * mlr_learners_surv.pchazard
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.pchazard
> ### Title: Survival PC-Hazard Learner
> ### Aliases: mlr_learners_surv.pchazard LearnerSurvPCHazard
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalmodels", quietly = TRUE) && requireNamespace("distr6", quietly = TRUE) && requireNamespace("reticulate", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.pchazard")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvPCHazard:surv.pchazard>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalmodels, distr6,
  reticulate
* Predict Type: crank
* Feature types: integer, numeric
* Properties: -
 [1] "frac"           "cuts"           "cutpoints"      "scheme"        
 [5] "cut_min"        "num_nodes"      "batch_norm"     "reduction"     
 [9] "dropout"        "activation"     "custom_net"     "device"        
[13] "optimizer"      "rho"            "eps"            "lr"            
[17] "weight_decay"   "learning_rate"  "lr_decay"       "betas"         
[21] "amsgrad"        "lambd"          "alpha"          "t0"            
[25] "momentum"       "centered"       "etas"           "step_sizes"    
[29] "dampening"      "nesterov"       "batch_size"     "epochs"        
[33] "verbose"        "num_workers"    "shuffle"        "best_weights"  
[37] "early_stopping" "min_delta"      "patience"       "interpolate"   
[41] "sub"           
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.penalized")
> ### * mlr_learners_surv.penalized
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.penalized
> ### Title: Survival L1 and L2 Penalized Regression Learner
> ### Aliases: mlr_learners_surv.penalized LearnerSurvPenalized
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("penalized", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.penalized")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvPenalized:surv.penalized>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, penalized, pracma
* Predict Type: distr
* Feature types: integer, numeric, factor, logical
* Properties: -
 [1] "unpenalized" "lambda1"     "lambda2"     "positive"    "fusedl"     
 [6] "startbeta"   "startgamma"  "steps"       "epsilon"     "maxiter"    
[11] "standardize" "trace"      
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.rfsrc")
> ### * mlr_learners_surv.rfsrc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.rfsrc
> ### Title: Survival Random Forest SRC Learner
> ### Aliases: mlr_learners_surv.rfsrc LearnerSurvRandomForestSRC
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("randomForestSRC", quietly = TRUE) && requireNamespace("pracma", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.rfsrc")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvRandomForestSRC:surv.rfsrc>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, randomForestSRC, pracma
* Predict Type: crank
* Feature types: logical, integer, numeric, factor
* Properties: importance, missings, oob_error, weights
 [1] "ntree"          "mtry"           "mtry.ratio"     "nodesize"      
 [5] "nodedepth"      "splitrule"      "nsplit"         "importance"    
 [9] "block.size"     "bootstrap"      "samptype"       "samp"          
[13] "membership"     "sampsize"       "sampsize.ratio" "na.action"     
[17] "nimpute"        "ntime"          "cause"          "proximity"     
[21] "distance"       "forest.wt"      "xvar.wt"        "split.wt"      
[25] "forest"         "var.used"       "split.depth"    "seed"          
[29] "do.trace"       "statistics"     "get.tree"       "outcome"       
[33] "ptn.count"      "estimator"      "cores"         
> 
> 
> 
> cleanEx()
> nameEx("mlr_learners_surv.svm")
> ### * mlr_learners_surv.svm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlr_learners_surv.svm
> ### Title: Survival Support Vector Machine Learner
> ### Aliases: mlr_learners_surv.svm LearnerSurvSVM
> 
> ### ** Examples
> 
> if (requireNamespace("mlr3proba", quietly = TRUE) && requireNamespace("survivalsvm", quietly = TRUE)) {
+   learner = mlr3::lrn("surv.svm")
+   print(learner)
+ 
+   # available parameters:
+   learner$param_set$ids()
+ }
<LearnerSurvSVM:surv.svm>
* Model: -
* Parameters: list()
* Packages: mlr3, mlr3proba, mlr3extralearners, survivalsvm
* Predict Type: crank
* Feature types: integer, numeric, character, factor, logical
* Properties: -
 [1] "type"        "diff.meth"   "gamma.mu"    "opt.meth"    "kernel"     
 [6] "kernel.pars" "sgf.sv"      "sigf"        "maxiter"     "margin"     
[11] "bound"       "eig.tol"     "conv.tol"    "posd.tol"   
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  16.634 0.359 16.555 0.004 0.001 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
